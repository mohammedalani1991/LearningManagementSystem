@using LearningManagementSystem.Core.SystemEnums
@using LearningManagementSystem.Services.Helpers
@using X.PagedList.Web.Common
@using X.PagedList.Mvc.Core
@model X.PagedList.IPagedList<DataEntity.Models.EfModels.EnrollStudentCourse>
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using DataEntity.Models.EfModels

@{
    var Quiz = (EnrollCourseQuiz)ViewBag.Quiz;
    var QuizPoints = (List<EnrollCourseQuizPointe>)ViewBag.QuizPoints;
    var QuizLowPoint = (decimal)ViewBag.QuizLowPoint;
}

<style>
    .red {
        background: #ff000024 !important;
    }

    .green {
        background: #0cff0024 !important;
    }
</style>

<div class="row">
    <div class="col-12 courses-title row pb-2">
        <div class="col-6 d-flex justify-content-start align-items-center">
            <span class="My-Cources mb-0">@Localizer["Enrolled Students"]</span>
        </div>
        <form class="col-6 d-flex align-items-center justify-content-between" data-ajax="true" method="get" action="/Trainer/EnrollCourseQuiz/ShowEnrolledStudents" id="Form1" data-ajax-success="GetEnrolledStudentsData" data-ajax-begin="ShowSpinner" data-ajax-complete="HideSpinner">
            @Html.Hidden("Page")
            @Html.Hidden("QuizId")
            @Html.Hidden("EnrollTeacherCourseId")
            <div class="col-md-8 col-sm-3 col-xs-12">
                @Html.TextBox("searchText", null, new { @class = "form-control search-control tms-search-input", placeholder = Localizer["Search For ..."].Value })
            </div>
            <div>
                <input class="btn btn-primary" type="submit" value=@Localizer["Search"] />
            </div>
        </form>
    </div>
    <div class="col-12">
        <div class="x_panel bg-transparent">
            <div class="table-responsive table-bordered">
                <table class="table text-center m-0">
                    <thead class="table-primary">
                        <tr class="tms-headings">
                            <th>
                                @Localizer["Id"]
                            </th>
                            <th>
                                @Localizer["Student Name"]
                            </th>
                            @if (Quiz.QuestionOne == true)
                            {
                                <th class="CourseId">
                                    @Localizer["New Save"]
                                </th>
                            }
                            @if (Quiz.QuestionTwo == true)
                            {
                                <th class="SectionName">
                                    @Localizer["Minor Review"]
                                </th>
                            }
                            @if (Quiz.QuestionThree == true)
                            {
                                <th class="Lectures">
                                    @Localizer["Grand Revision"]
                                </th>
                            }
                            <th>
                                @Localizer["Created On"]
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Count == 0)
                        {
                            <tr class="tms-tr">
                                <td colspan="12">@Localizer["No data available in the table"] </td>
                            </tr>
                        }
                        @foreach (var item in Model)
                        {
                            var point = QuizPoints.FirstOrDefault(r => r.EnrollStudentCourseId == item.Id);
                            <tr class="tms-tr">
                                <td>
                                    @Html.DisplayFor(modelItem => item.Student.Id)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Student.Contact.FullName)
                                </td>
                                @if (Quiz.QuestionOne == true)
                                {
                                    <td class="p-4" style="max-width:120px">
                                        <input type="number" class="form-control tms-input markinput @(point != null && point.QuestionOne > -1 ? (point?.QuestionOne < QuizLowPoint ? "red" : "green"): "")" onchange="SetMark(this ,@Quiz.Id ,@item.Id ,1)" value="@(point?.QuestionOne > -1 ? point?.QuestionOne: "")" />
                                    </td>
                                }
                                @if (Quiz.QuestionTwo == true)
                                {
                                    <td class="p-4" style="max-width:120px">
                                        <input type="number" class="form-control tms-input markinput @(point != null && point.QuestionTwo > -1 ? (point?.QuestionTwo < QuizLowPoint ? "red" : "green"): "")" onchange="SetMark(this ,@Quiz.Id ,@item.Id ,2)" value="@(point?.QuestionTwo > -1 ? point?.QuestionTwo: "")" />
                                    </td>
                                }
                                @if (Quiz.QuestionThree == true)
                                {
                                    <td class="p-4" style="max-width:120px">
                                        <input type="number" class="form-control tms-input markinput @(point != null && point.QuestionThree > -1 ? (point?.QuestionThree < QuizLowPoint ? "red" : "green"): "")" onchange="SetMark(this ,@Quiz.Id ,@item.Id ,3)" value="@(point?.QuestionThree > -1 ? point?.QuestionThree: "")" />
                                    </td>
                                }
                                <td>
                                    @Html.DisplayFor(modelItem => item.CreatedOn)
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="paddtop-Page">
                    @if (Model.PageCount > 0)
                    {
                        <div class="paging-div">
                            @Html.PagedListPager(Model, page => Url.Action("ShowEnrolledStudents", new { page, quizId = ViewBag.QuizId, enrollTeacherCourseId = ViewBag.enrollTeacherCourseId }), PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new AjaxOptions() { HttpMethod = "GET", UpdateTargetId = "ShowStudentForQuizDiv" }))
                            <div class="d-flex justify-content-center">@Localizer["Page"] <p class="text-danger px-1">@(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber)</p>@Localizer["from"] <p class="text-primary px-1">@Model.PageCount</p> @Localizer["Item No:"]  <p class="text-primary px-1">@Model.TotalItemCount</p> </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    function SetColor(current) {
        $(current).css("color", "#333");
        if (parseFloat(current.value) >= '@QuizLowPoint')
            $(current).css("background", "#0cff0024");
        else
            $(current).css("background", "#ff000024");
    }
</script>
