@using LearningManagementSystem.Services.Helpers
@using LearningManagementSystem.Core.SystemEnums
@using LearningManagementSystem.Core
@using X.PagedList.Web.Common
@using X.PagedList.Mvc.Core
@model X.PagedList.IPagedList<DataEntity.Models.EfModels.EnrollTeacherCourse>
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using LearningManagementSystem.Services.ControlPanel
@inject IEnrollTeacherCourseService CourseService
@inject ISemesterService SemesterService
@inject IEnrollStudentCourseService EnrollStudentCourseService
@inject ICourseCategoryService CourseCategoryService

@{
    var lookupName = new HashSet<string>() { GeneralEnums.MasterLookupCodeEnums.CourseAgeGroup.ToString() };
    var lookups = LookupHelper.GetLookupDetailsByMasterCode(lookupName, ViewBag.LangId);

    var paginations = LookupHelper.GetLookupDetailsByMasterCode(GeneralEnums.MasterLookupCodeEnums.Pagination.ToString(), ViewBag.LangId);
    var paginationValue = ViewBag.PaginationValue;
    var status = LookupHelper.GetStatuses(ViewBag.LangId);
    var countries = LookupHelper.GetCountries(ViewBag.LangId);
    var gender = lookups[GeneralEnums.MasterLookupCodeEnums.CourseAgeGroup.ToString()];
    var fromCheckDate = (DateTime)ViewBag.FromDate;
    var toCheckDate = (DateTime)ViewBag.ToDate;
    var fromDateCheckFilter = $"{fromCheckDate.Date.Year}-{fromCheckDate.Date.Month:D2}-{fromCheckDate.Date.Day:D2}";
    var toDateCheckFilter = $"{toCheckDate.Date.Year}-{toCheckDate.Date.Month:D2}-{toCheckDate.Date.Day:D2}";
    var fromCheckPublisheDate = (DateTime)ViewBag.FromPublisheDate;
    var toCheckPublisheDate = (DateTime)ViewBag.ToPublisheDate;
    var fromPublisheDateCheckFilter = $"{fromCheckPublisheDate.Date.Year}-{fromCheckPublisheDate.Date.Month:D2}-{fromCheckPublisheDate.Date.Day:D2}";
    var toPublisheDateCheckFilter = $"{toCheckPublisheDate.Date.Year}-{toCheckPublisheDate.Date.Month:D2}-{toCheckPublisheDate.Date.Day:D2}";
    var FromToDate = $"{fromDateCheckFilter} - {toDateCheckFilter}";
    var FromToPublisheDate = $"{fromPublisheDateCheckFilter} - {toPublisheDateCheckFilter}";
    var courses = CourseService.GetCourseList(ViewBag.LangId);
    var courseCategory = CourseCategoryService.GetAllCourseCategorys(ViewBag.LangId);
    var techers = CourseService.GetTeacherList(ViewBag.LangId);
    var semesters = SemesterService.GetSemestersList(ViewBag.LangId);
    var yesNoOptions = new List<SelectListItem>
    {
        new SelectListItem { Value = "1", Text = Localizer["Yes"].Value },
        new SelectListItem { Value = "2", Text = Localizer["No"].Value }
    };
}

<div class="col-md-12 col-sm-12 col-xs-12 tms-page">
    <div class="x_panel bg-transparent">
        <div class="tms-page-title row w-100">
            <div class="tms-title col-12 row">
                <div class="col-7">
                    <h4>@Localizer["Courses Report"] <small>@ViewData["Title"]</small></h4>
                </div>
                <div class="col-5 d-flex justify-content-end px-0">
                    <a id="btnDownLoad" onclick="Download()" class="btn tms-search-input mx-0" href="#">
                        <i class="fa fa-file-excel-o" aria-hidden="true"></i>
                        @Localizer["Download"]
                    </a>
                    <a style="display: none;" href="" target="_blank" class="nav-link" id="export-to-excel"></a>
                </div>
            </div>
            <div class="col-12">
                <form data-ajax="true" method="get" action="CoursesReports/GetData" id="Form1" data-ajax-success="GetData" data-ajax-begin="ShowSpinner" data-ajax-complete="HideSpinner">
                    <div class="row mt-3">
                        @Html.Hidden("pagination")
                        @Html.Hidden("page")
                        @Html.Hidden("table")
                        @Html.Hidden("filter.SecondOpen", true)

                        <div class="col-md-2 col-sm-3 col-xs-12 ">
                            @Html.DropDownList("filter.CourseCategory", new SelectList(courseCategory, "Id", "Name", ViewBag.Course), Localizer["Course Category"].Value, new { @class = "form-control chosen-select tms-ddl" })
                        </div>
                        <div class="col-md-2 col-sm-3 col-xs-12 px-1">
                            @Html.DropDownList("filter.Courses", new SelectList(courses, "Id", "CourseName"), Localizer["Course"].Value, new { @class = "form-control chosen-select tms-ddl", multiple = "multiple" })
                        </div>
                        <div class="col-md-2 col-sm-3 col-xs-12 px-1">
                            @Html.DropDownList("filter.Teacher", new SelectList(techers, "Id", "Name", ViewBag.Teacher), Localizer["Teacher"].Value, new { @class = "form-control chosen-select tms-ddl" })
                        </div>
                        <div class="col-md-2 col-sm-3 col-xs-12 px-1">
                            @Html.DropDownList("filter.Semester", new SelectList(semesters, "Id", "Name", ViewBag.Semester), Localizer["Semester"].Value, new { @class = "form-control chosen-select tms-ddl" })
                        </div>
                        <div class="col-md-2 col-sm-5 col-xs-12 px-1 top-30">
                            <label>@Localizer["Published Date"]</label>
                            <input type="text" placeholder="@Localizer["Published Date"]" class="form-control search-control tms-search-input" value="@FromToPublisheDate" name="filter.FromToPublisheDate" id="filter_FromToPublisheDate" readonly />
                        </div>
                        <div class="col-md-2 col-sm-5 col-xs-12 top-30">
                            <label>@Localizer["Start Date"]</label>
                            <input type="text" placeholder="@Localizer["Start Date"]" class="form-control search-control tms-search-input" value="@FromToDate" name="filter.FromToDate" id="filter_FromToDate" readonly />
                        </div>
                        <div class="col-md-2 col-sm-3 col-xs-12">
                            @Html.DropDownList("filter.Gender", new SelectList(gender, "Id", "Name", ViewBag.Gender), Localizer["Allowed Gender"].Value, new { @class = "form-control chosen-select tms-ddl" })
                        </div>
                        <div class="col-md-2 col-sm-3 col-xs-12 px-1">
                            @Html.TextBox("filter.AgeFrom", ((int)ViewBag.AgeFrom > 0 ? (int)ViewBag.AgeFrom : null), new { @class = "form-control search-control tms-search-input", placeholder = Localizer["Student Allowed Age"].Value })
                        </div>
                        <div class="col-md-1 col-sm-3 col-xs-12 px-1">
                            @Html.DropDownList("filter.Status", new SelectList(status, "Id", "Name", ViewBag.Status), Localizer["Status"].Value, new { @class = "form-control chosen-select tms-ddl" })
                        </div>
                        <div class="col-md-1 col-sm-3 col-xs-12 px-1">
                            @Html.DropDownList("filter.MarkAdoption", yesNoOptions, Localizer["Marks Calculated"].Value, new { @class = "form-control chosen-select tms-ddl" })
                        </div>
                        <div class="col-md-2 col-sm-3 col-xs-12 px-1">
                            @Html.DropDownList("filter.CertificateAdoption", yesNoOptions, Localizer["Certificates Adoption"].Value, new { @class = "form-control chosen-select tms-ddl" })
                        </div>
                        <div class="col-md-1 col-sm-3 col-xs-12 px-1">
                            @Html.TextBox("filter.SectionName", (string)ViewBag.SectionName, new { @class = "form-control search-control tms-search-input", placeholder = Localizer["Section Name"].Value })
                        </div>
                        <div class="col-md-2 col-sm-3 col-xs-12 px-1">
                            @Html.TextBox("searchText", null, new { @class = "form-control search-control tms-search-input", placeholder = Localizer["Search For ..."].Value })
                        </div>
                        <input class="btn btn-primary" type="submit" value=@Localizer["Search"] style="height:35px" />
                    </div>
                </form>
            </div>
        </div>
        <div class="x_content">
            <div class="table-responsive">
                <table class="tms-table">
                    <thead>
                        <tr class="tms-headings">
                            <th class="CourseName d-none">
                                @Localizer["Course Name"]
                            </th>
                            <th class="CourseCategory d-none">
                                @Localizer["Course Category"]
                            </th>
                            <th class="TeacherName d-none">
                                @Localizer["Teacher Name"]
                            </th>
                            <th class="Attendance d-none">
                                @Localizer["Attendance"]
                            </th>
                            <th class="SemesterName d-none">
                                @Localizer["Semester Name"]
                            </th>
                            <th class="SectionName d-none">
                                @Localizer["Section Name"]
                            </th>
                            <th class="AgeAllowedForRegistration d-none">
                                @Localizer["Allowed Age"]
                            </th>
                            <th class="GenderGroup d-none">
                                @Localizer["Students Gender"]
                            </th>
                            <th class="CountOfAllowedStudent d-none">
                                @Localizer["Number Of Allowed Student"] (@ViewBag.Capacity)
                            </th>
                            <th class="CountOfStudent d-none">
                                @Localizer["Number Of Student"]  (@ViewBag.StudentCount)
                            </th>
                            <th class="Passed d-none">
                                @Localizer["Passed Number"] (@ViewBag.SeccessCount)
                            </th>
                            <th class="Warning d-none">
                                @Localizer["Warning"] (@ViewBag.WarningCount)
                            </th>
                            <th class="EnrollLectures d-none">
                                @Localizer["Lectures Number"]
                            </th>
                            <th class="PublicationDate d-none">
                                @Localizer["Publication Start Date"]
                            </th>
                            <th class="PublicationEndDate d-none">
                                @Localizer["Publication End Date"]
                            </th>
                            <th class="WorkStartDate d-none">
                                @Localizer["Start Date"]
                            </th>
                            <th class="WorkEndDate d-none">
                                @Localizer["End Date"]
                            </th>
                            <th class="CreatedOn d-none">
                                @Localizer["Created On"]
                            </th>
                            <th class="CreatedBy d-none">
                                @Localizer["Created By"]
                            </th>
                            <th class="Status d-none">
                                @Localizer["Status"]
                            </th>
                            <th>
                                <a onclick="ShowEditTable()" class="btn btn-sm btn-secondary add-cursor text-white my-0" title="@Localizer["Edit Programs"]">
                                    <i class="fa fa-tasks"></i>
                                </a>
                                @Html.DropDownList("pagin", new SelectList(paginations, "Code", "Name", paginationValue), null, new { @class = "mx-3 p-1 rounded", style = "max-height: 26px;min-width: 49px;", required = "required", @onchange = "ChangePagenation()" })
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            var count = item.EnrollStudentCourses.Where(r => r.Status == (int)GeneralEnums.StatusEnum.Active).Count();
                            <tr class="tms-tr">
                                <td class="CourseName d-none">
                                    <a href="@Url.Action("EditPage", "EnrollmentCourse", new {Area = "ControlPanel" , id = item.Id})">@item.CourseName</a>
                                </td>
                                <td class="CourseCategory d-none">
                                    @item.Course?.Category?.Name
                                </td>
                                <td class="TeacherName d-none">
                                    @Html.DisplayFor(modelItem => item.Teacher.Contact.FullName)
                                </td>
                                <td class="Attendance d-none">
                                    @if (!LookupHelper.CheckIfClassOnline(item.CourseId) && item.Status == (int)GeneralEnums.StatusEnum.Active)
                                    {
                                        <button onclick="GetTeacherAttendancesData('@item.Id')" class="btn-primary d-flex justify-content-center align-items-center rounded" style="padding:5px;font-size:14px">
                                            <p style="color:green ;margin-bottom:0">
                                                @item.TeacherAttendances.Where(r => r.Attended == true).Count()
                                            </p>
                                            /
                                            <p style="color:red;margin-bottom:0">
                                                @item.TeacherAttendances.Where(r => r.Attended == false).Count()
                                            </p>
                                            /
                                            <p style="margin-bottom:0">
                                                @EnrollStudentCourseService.GetAttendanceDays(item.Id)
                                            </p>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-secondary" disabled>@Localizer["Online Class"]</button>
                                    }
                                </td>
                                <td class="SemesterName d-none">
                                    @item.Semester?.Name
                                </td>
                                <td class="SectionName d-none">
                                    @item.SectionName
                                </td>
                                <td class="AgeAllowedForRegistration d-none">
                                    @Html.DisplayFor(modelItem => item.AgeAllowedForRegistration)
                                </td>
                                <td class="GenderGroup d-none">
                                    @LookupHelper.GetLookupDetailsById(item.AgeGroup, ViewBag.LangId)?.Name
                                </td>
                                <td class="CountOfAllowedStudent d-none">
                                    @item.CountOfStudent
                                </td>
                                <td class="CountOfStudent d-none">
                                    @count
                                </td>
                                <td class="Passed d-none success">
                                    @if (item.CountOfStudent > 0)
                                    {
                                        <button class="btn btn-success" onclick="ShowPassed(false)">@item.EnrollStudentCourses.Where(r => r.IsPass == true && r.Status == (int)GeneralEnums.StatusEnum.Active).Count() / @count</button>
                                        <button class="btn btn-danger" style="display:none" onclick="ShowPassed(true)">@item.EnrollStudentCourses.Where(r => r.IsPass == false && r.Status == (int)GeneralEnums.StatusEnum.Active).Count() / @count</button>
                                    }
                                </td>

                                <td class="Warning d-none">
                                    @item.EnrollStudentAlerts.Where(r => r.Status == (int)GeneralEnums.StatusEnum.Active).Count()
                                </td>
                                <td class="EnrollLectures d-none">
                                    @item.EnrollLectures.Count()
                                </td>
                                <td class="PublicationDate d-none">
                                    @item.PublicationDate.ToShortDateString()
                                </td>
                                <td class="PublicationEndDate d-none">
                                    @item.PublicationEndDate?.ToShortDateString()
                                </td>
                                <td class="WorkStartDate d-none">
                                    @item.WorkStartDate.ToShortDateString()
                                </td>
                                <td class="WorkEndDate d-none">
                                    @item.WorkEndDate?.ToShortDateString()
                                </td>
                                <td class="CreatedOn d-none">
                                    @item.CreatedOn.ToShortDateString()
                                </td>
                                <td class="CreatedBy d-none">
                                    @LookupHelper.GetFullNameByEmail(item.CreatedBy, (int)ViewBag.LangId)
                                </td>
                                <td class="Status d-none">
                                    @LookupHelper.GetStatusById(item.Status, ViewBag.LangId)?.Name
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                @if (Model.PageCount > 0)
                {
                    <div class="paging-div mb-5">
                        @Html.PagedListPager(Model, page => Url.Action("GetData", new
                            {
                                page,
                                searchText = ViewBag.searchText,
                                Gender = ViewBag.Gender,
                                CourseCategory = ViewBag.CourseCategory,
                                AgeFrom = ViewBag.AgeFrom,
                                FromDate = ViewBag.FromDate,
                                ToDate = ViewBag.ToDate,
                                FromPublisheDate = ViewBag.FromPublisheDate,
                                ToPublisheDate = ViewBag.ToPublisheDate,
                                Status = ViewBag.Status,
                                SectionName = ViewBag.SectionName,
                                Courses = ViewBag.Courses,
                                Teacher = ViewBag.Teacher,
                                Semester = ViewBag.Semester,
                                SecondOpen = true,
                                CertificateAdoption = ViewBag.CertificateAdoption,
                                MarkAdoption = ViewBag.MarkAdoption
                            }), PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new AjaxOptions() { HttpMethod = "GET", UpdateTargetId = "main", OnBegin = "ShowSpinner", OnComplete = "HideSpinner" }))
                        <div class="d-flex justify-content-center">@Localizer["Page"] <p class="text-danger px-1">@(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber)</p>@Localizer["from"] <p class="text-primary px-1">@Model.PageCount</p> @Localizer["Courses Number:"]  <p class="text-primary px-1">@Model.TotalItemCount</p> </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>


<script>
    $(document).ready(function () {
        table = '@ViewBag.Table'.split(',');
        GetTable(s);
        $("#filter_FromToDate").setDatePickRange('@fromDateCheckFilter', '@toDateCheckFilter');
        $("#filter_FromToPublisheDate").setDatePickRange('@fromPublisheDateCheckFilter', '@toPublisheDateCheckFilter');

        SetMultiSelect(@Html.Raw(Json.Serialize(ViewBag.Courses)), "#filter_Courses")
    });

    function SetMultiSelect(val, id) {
        var selectedIds = val.map(function (id) {
            return id.toString();
        });
        if (selectedIds != null)
            $(id).val(selectedIds).trigger('chosen:updated');
    }

    function ShowPassed(passed) {
        if (passed) {
            $("td.Passed .btn-danger").hide()
            $("td.Passed .btn-success").show()
            $("th.Passed").html("@Localizer["Passed Number"] (@ViewBag.SeccessCount)");
        } else {
            $("td.Passed .btn-success").hide()
            $("td.Passed .btn-danger").show()
            $("th.Passed").html("@Localizer["Failed Number"] (@ViewBag.FaildCount)");
        }
    }
    function Download() {
        var ActionLink = '/Reports/CoursesReports/DownloadReport';
        var href = ActionLink + '?' + $("#Form1").serialize();
        var anchor = $('#export-to-excel');
        anchor.attr('href', href);
        anchor[0].click();
    }
</script>