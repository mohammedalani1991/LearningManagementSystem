@page
@model IndexModel
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.AspNetCore.Localization;
@using LearningManagementSystem.Core.SystemEnums
@using LearningManagementSystem.Services.Helpers
@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Antiforgery
@inject IAntiforgery antiforgery

@{
    var requestCulture = HttpContext.Features.Get<IRequestCultureFeature>();
    var selectedLang = requestCulture.RequestCulture.UICulture.Name == "en-US" ? "English" : "عربي";
    var lookupName = new HashSet<string>
        () { GeneralEnums.MasterLookupCodeEnums.Languages.ToString(), GeneralEnums.MasterLookupCodeEnums.Gender.ToString(), GeneralEnums.MasterLookupCodeEnums.EducationalLevel.ToString(), GeneralEnums.MasterLookupCodeEnums.CalendarType.ToString() };
    int langId = int.Parse(ViewData["LangId"].ToString());
    string success = ViewData["Success"].ToString();
    var lookups = LookupHelper.GetLookupDetailsByMasterCode(lookupName, langId);
    var cities = LookupHelper.GetCities(langId, Model.Input.CountryId);
    var countries = LookupHelper.GetCountries(langId);
    var languages = lookups[GeneralEnums.MasterLookupCodeEnums.Languages.ToString()];
    var gender = lookups[GeneralEnums.MasterLookupCodeEnums.Gender.ToString()];
    var EducationalLevel = lookups[GeneralEnums.MasterLookupCodeEnums.EducationalLevel.ToString()];
    var CalenderType = lookups[GeneralEnums.MasterLookupCodeEnums.CalendarType.ToString()];

    ViewData["Title"] = @Localizer["Profile"];
    ViewData["ActivePage"] = ManageNavPages.Index;
    int image = (int)GeneralEnums.FileEnum.Image;
    var tokenSet = antiforgery.GetAndStoreTokens(HttpContext);
    string profilePhoto = string.IsNullOrWhiteSpace(Model.Input.ProfilePhoto) ? "/theme/Public/assets/images/Upload-Image.png" : Model.Input.ProfilePhoto;

    var IsStudent = AuthenticationHelper.CheckIsStudent(User.Identity.Name);
    var IsTrainer = AuthenticationHelper.CheckIsTrainer(User.Identity.Name);
}

<style>
    .translate-middle-y-ar {
        transform: translateY(-50%) !important;
    }


    .chosen-select {
        width: 0 !important;
    }

    .chosen-single, .chosen-select {
        width: 100%;
        height: 51.84px !important;
        border: 1px solid #BBCAFF !important;
        border-radius: 5px !important;
        background-color: #F4F7FE !important;
        display: block !important;
        padding: .375rem .75rem .375rem 2.25rem;
    }

        .chosen-single > span {
            margin-top: 7px;
        }

        .chosen-single div b {
            margin-top: 12px !important;
        }

    .Courses .list-group {
        height: 120px;
        overflow: scroll;
    }

    #CourseTrainerEnrollDetails {
        overflow: auto;
    }

    @@media only screen and (max-width: 720px) {
        .chosen-select {
            width: 100% !important;
        }

        .table-responsive .table {
            overflow: scroll;
            width: 1000px;
        }

        .btn-primary {
            font-size: 14px;
        }

        .col-12.dropdown.d-block.d-lg-none.mb-3 {
            display: none !important;
        }
    }
</style>

<div class="col-md-9 col-xl-10 col-12 row px-0 mx-0">
    <div id="Personal" class="tabcontent">
        <partial name="_StatusMessage" model="Model.StatusMessage" />

        <form method="post">
            @Html.HiddenFor(r => r.Input.ContactId)
            @Html.HiddenFor(r => r.Input.ProfilePhoto)
            @Html.HiddenFor(r => r.Input.Signature)
            @Html.HiddenFor(r => r.Input.StudentId)

            <div class="row">
                <div class="col-12 col-lg">
                    <div class="mb-3">
                        <div class="d-flex align-items-center" style="height: 184px;">
                            <input type='file' id="input-file" style="display:none;" onchange="UploadProfilePhoto(event,false)" />
                            <input type="hidden" name="Input_ProfilePhoto" id="Input_ProfilePhoto" value="@Model.Input.ProfilePhoto" />
                            <button class="btn button-file form-label position-relative" id="button-file">
                                <img id="myImg" src="@profilePhoto"
                                     class="img-fluid upload-img rounded-circle" alt="">
                                <i class="fa-solid fa-arrow-up-from-bracket bg-white p-2 rounded-circle text-primarycolor position-absolute start-50 translate-middle-x"></i>
                                @Localizer["Upload Image"]
                            </button>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">@Localizer["Language"]</label>
                        @Html.DropDownList("Input.PreferedLanguageId", new SelectList(languages, "Id", "Name", Model.Input.PreferedLanguageId), Localizer["Choose Language"].Value, new { @class = "form-select", required = "required" })
                        @Html.ValidationMessageFor(model => model.Input.PreferedLanguageId, "", new { @class = "text-danger" })
                    </div>
                    <div class="mb-3">
                        <label class="form-label">@Localizer["Gender"]</label>
                        @Html.DropDownList("Input.GenderId", new SelectList(gender, "Id", "Name", Model.Input.GenderId), string.Empty, new { @class = "form-select", required = "required" })
                        @Html.ValidationMessageFor(model => model.Input.GenderId, "", new { @class = "text-danger" })
                    </div>

                    @if (IsStudent)
                    {
                        <div class="mb-3">
                            <label class="form-label">@Localizer["Date of Birth"]</label>
                            <input class="form-control" id="Input.BirthDate" name="Input.BirthDate" required
                                   type="date" value="@($"{Model.Input.BirthDate?.Date.Year}-{Model.Input.BirthDate?.Date.Month:D2}-{Model.Input.BirthDate?.Date.Day:D2}")">
                        </div>
                    }
                    @if (IsTrainer)
                    {
                        <div class="mb-3">
                            <label class="form-label d-block">@Localizer["Signature"]</label>
                            <label class="custom-file-upload">
                                <input type="file" accept="image/*" id="input-file" onchange="UploadProfilePhoto(event,true)" />
                                <i class="fa fa-upload px-2 pt-1"></i> @Localizer["Upload"]
                            </label>
                            <input type="hidden" name="Input_Signature" id="Input_Signature" value="@Model.Input.Signature" />
                            @if (Model.Input.Signature != null)
                            {
                                <img src="@Model.Input.Signature" id="SignatureView" style="width:100%;height:150px" class="mt-2 rounded" alt="">
                            }
                        </div>
                    }
                </div>

                <div class="col-12 col-lg">
                    @if (IsStudent)
                    {
                        <div class="mb-3">
                            <label class="form-label">@Localizer["First Name"]</label>
                            @Html.EditorFor(model => model.Input.FirstName, new { htmlAttributes = new { disabled = "disabled", @class = "form-control shadow-none" } })
                            @Html.ValidationMessageFor(model => model.Input.FirstName, "", new { @class = "text-danger" })
                        </div>
                        <div class="mb-3">
                            <label class="form-label">@Localizer["Third Name"]</label>
                            @Html.EditorFor(model => model.Input.ThirdName, new { htmlAttributes = new { @class = "form-control shadow-none", disabled = "disabled" } })
                            @Html.ValidationMessageFor(model => model.Input.ThirdName, "", new { @class = "text-danger" })
                        </div>
                    }
                    else
                    {
                        <div class="mb-3">
                            <label class="form-label">@Localizer["First Name"]</label>
                            @Html.EditorFor(model => model.Input.FirstName, new { htmlAttributes = new { required = "required", @class = "form-control shadow-none" } })
                            @Html.ValidationMessageFor(model => model.Input.FirstName, "", new { @class = "text-danger" })

                        </div>

                        @*<div class="mb-3">
                    <label class="form-label">Support Pin</label>
                    <input type="text" class="form-control shadow-none">
                    </div>
                    <div class="mb-3">
                    <label class="form-label">Account Number</label>
                    <input type="text" class="form-control shadow-none" disabled>
                    </div>
                    <div class="mb-3">
                    <label class="form-label">Loyalty Credit</label>
                    <input type="number" class="form-control shadow-none" disabled>
                    </div>*@
                        <div class="mb-3">
                            <label class="form-label">@Localizer["Third Name"]</label>
                            @Html.EditorFor(model => model.Input.ThirdName, new { htmlAttributes = new { @class = "form-control shadow-none" } })
                            @Html.ValidationMessageFor(model => model.Input.ThirdName, "", new { @class = "text-danger" })
                        </div>
                    }
                    <div class="mb-3">
                        <label class="form-label">@Localizer["Country"]</label>
                        @Html.DropDownList("Input.CountryId", new SelectList(countries, "Id", "Name", Model.Input.CountryId), string.Empty, new { @class = "chosen-select", onchange = "GetCountryCities()", @required = "required" })
                        @Html.ValidationMessageFor(model => model.Input.CountryId, "", new { @class = "text-danger" })
                    </div>
                    @if (IsStudent)
                    {
                        <div class="mb-3">
                            <label class="form-label">@Localizer["Educational Level"]</label>
                            @Html.DropDownList("Input.EducationalLevelId", new SelectList(EducationalLevel, "Id", "Name", Model.Input.EducationalLevelId), string.Empty, new { @class = "form-select" })
                            @Html.ValidationMessageFor(model => model.Input.EducationalLevelId, "", new { @class = "text-danger" })
                        </div>
                    }
                    <div class="mb-3 row">
                        <div class="col-4">
                            <label class="form-label">@Localizer["Country Code"]</label>
                            @Html.DropDownList("Input.PhoneNumberCode", new SelectList(new List<SelectListItem>()), Localizer["Other"].Value, new { @required = "required", @class = "chosen-select" })
                            @Html.ValidationMessageFor(model => model.Input.PhoneNumberCode, "", new { @class = "text-danger" })

                        </div>
                        <div class="col-8">
                            <label class="form-label">@Localizer["Phone Number"]</label>
                            @Html.EditorFor(model => model.Input.PhoneNumber, new { htmlAttributes = new { @required = "required", @class = "form-control shadow-none" } })
                            @Html.ValidationMessageFor(model => model.Input.PhoneNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>
                <div class="col-12 col-lg">
                    @if (IsStudent)
                    {
                        <div class="mb-3">
                            <label class="form-label">@Localizer["Second Name"]</label>
                            @Html.EditorFor(model => model.Input.SecondName, new { htmlAttributes = new { @class = "form-control shadow-none", disabled = "disabled" } })
                            @Html.ValidationMessageFor(model => model.Input.SecondName, "", new { @class = "text-danger" })
                        </div>
                        <div class="mb-3">
                            <label class="form-label">@Localizer["Last Name"]</label>
                            @Html.EditorFor(model => model.Input.LastName, new { htmlAttributes = new { disabled = "disabled", @class = "form-control shadow-none" } })
                            @Html.ValidationMessageFor(model => model.Input.LastName, "", new { @class = "text-danger" })
                        </div>
                    }
                    else
                    {
                        <div class="mb-3">
                            <label class="form-label">@Localizer["Second Name"]</label>
                            @Html.EditorFor(model => model.Input.SecondName, new { htmlAttributes = new { @class = "form-control shadow-none" } })
                            @Html.ValidationMessageFor(model => model.Input.SecondName, "", new { @class = "text-danger" })
                        </div>
                        <div class="mb-3">
                            <label class="form-label">@Localizer["Last Name"]</label>
                            @Html.EditorFor(model => model.Input.LastName, new { htmlAttributes = new { required = "required", @class = "form-control shadow-none" } })
                            @Html.ValidationMessageFor(model => model.Input.LastName, "", new { @class = "text-danger" })
                        </div>
                    }
                    <div class="mb-3">
                        <label class="form-label">@Localizer["City"]</label>
                        @Html.DropDownList("Input.CityId", new SelectList(cities, "Id", "Name", Model.Input.CityId), string.Empty, new { @class = "chosen-select" })
                        @Html.ValidationMessageFor(model => model.Input.CityId, "", new { @class = "text-danger" })
                    </div>
                    <div class="mb-3">
                        <label class="form-label">@Localizer["Id Number"]</label>
                        @Html.EditorFor(model => model.Input.IdNumber, new { htmlAttributes = new { @class = "form-control shadow-none" } })
                        @Html.ValidationMessageFor(model => model.Input.IdNumber, "", new { @class = "text-danger" })
                    </div>

                </div>
            </div>
            <div class="w-100 d-flex">
                <button class="btn btn-primary tab-SaveEdits mx-auto">@Localizer["Save Edits"]</button>
            </div>
        </form>
    </div>
    <div id="E-Mail" class="tabcontent">
    </div>
    <div id="Password" class="tabcontent ">
    </div>
    <div id="DeleteAccount" class="tabcontent ">
        <div class="row">
            <div class="col-12 p-0">
                <div class="alert alert-dismissible fade show d-flex justify-content-between align-items-center"
                     role="alert">
                    <div class="m-0 font-foot-smoll d-flex align-items-center">
                        <i class="fa-solid fa-bell px-3"></i>
                        <p>
                            Deleting your
                            account will be
                            permanent and you will not be able to recover it.
                        </p>
                    </div>
                    <i class="modal-Close fa-solid fa-circle-xmark px-3 " data-bs-dismiss="alert"
                       aria-label="Close"></i>
                </div>
            </div>
            <div class="col-12 p-0">
                <div class="w-divDel">
                    <p>Delete Account</p>
                    <p>
                        Your account contains the personal data you entered .. You can download or delete it
                        through
                        the buttons below
                    </p>
                    <button class="btn btn-bg-red Change-Email">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <div id="Calendar" class="tabcontent">
        <div class="row justify-content-between align-items-end px-3">
            <p class="col d-block d-lg-none text-end">
                <button class="btn btn-primary" type="button" data-bs-toggle="collapse"
                        data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
                    @Localizer["Search and Filter"]
                </button>
            </p>

            <div class=" col-12 collapse d-lg-block" id="collapseExample">
                <form>
                    <div class="row g-3 g-lg-0 align-items-center">
                        <input type="text" id="txtCalendarSearch" class="form-control m-lg-0 Search" placeholder="&#xf002; @Localizer["Search"].Value">
                        @Html.DropDownList("ddlCalendarType", new SelectList(CalenderType, "Id", "Name"), Localizer["Select Type"].Value, new { @class = "form-select Filter" })
                        <button id="txtExportCalendarData" class="btn btn-outline-primary Export ms-lg-auto mx-2">@Localizer["Export"]</button>
                        <button type="button" id="btnCalendarSerach" class="btn btn-primary Export">@Localizer["Search"]</button>
                    </div>
                </form>
            </div>
        </div>
        <div class="">
            <div id="calendar"></div>
        </div>
    </div>
    <div id="Certificates" class="tabcontent">
    </div>
    <div id="MyCourses" class="tabcontent">
        <div id="MyCoursesPackagesData">
        </div>
        <div id="MyCoursesData">
        </div>
    </div>
    @if (AuthenticationHelper.CheckSuperAuthentication("PracticalExams"))
    {
        <div id="MySupportCourses" class="tabcontent">
        </div>
    }
    <div iz="MyBalance" class="tabcontent">
    </div>
</div>


<div class="modal fade" id="DetailsCalendar" tabindex="-1" aria-labelledby="DetailsCalendarLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5"></h1>
                <i class="fa-solid fa-circle-xmark modal-Close" data-bs-dismiss="modal"
                   aria-label="Close"></i>
            </div>
            <div class="row">
                <div class="col-md-12 col-sm-12 col-xs-12">
                    <div class="x_panel">

                        <div class="x_content">
                            <br />
                            <div class="CalendarDescription">
                            </div>
                        </div>
                    </div>
                </div>


            </div>
        </div>
    </div>
</div>

<style>
    .fc-event {
        cursor: pointer;
    }
</style>

@section Scripts1 {
    <script src="~/js/Account/Manage/Index.js?ver=11.1"></script>
    <script src="~/js/Country/City.js"></script>

    <script>

        if ("@success" == "True") {
            toastr.success("@Localizer["Balance Added Successfully"]")
            $("#BalanceBtn")[0].click();
        }
        else if ("@success" == "False") {
            toastr.error("@Localizer["Error Occurred While Paying"]")
            $("#BalanceBtn")[0].click();
        }

        let arr = [];
        var AddAttendanceSuccessMessage = '@Localizer["Added successfully"]';
        var AddAttendanceErrorMessage = '@Localizer["An error occurred while adding"]';
        let get = true;
        let SubjectMark;
        let Mark;
        let MarkAfterConversion;
        let limit;
        let subjectValues = {};
        let AddSubjectMessage = '@Localizer["Please add Some Subjects Before"]';
        var subjectCount;
        var editMassege = '@Localizer["Edited successfully"]';
        var addMassege = '@Localizer["Added successfully"]';
        var PassStudentMassege = '@Localizer["Pass successfully"]';
        var deleteMassege = '@Localizer["Deleted successfully"]';
        var deleteMassegeError = '@Localizer["An error occurred while  deleting"]';
        var PassStudentMassegeError = '@Localizer["An error occurred while  Passing"]';
        var addMassegeError = '@Localizer["An error occurred while adding"]';
        var editMassegeError = '@Localizer["An error occurred while editing"]';

        function onDdlChanged(langId) {
            window.location = "@HttpContext.Request.Scheme://@HttpContext.Request.Host@HttpContext.Request.Path" + "?languageId=" + langId.value; // redirect
        }

        function UploadProfilePhoto(e, Signature) {
            var files = e.target.files;
            if (files.length > 0) {
                if (window.FormData !== undefined) {
                    var formData = new FormData();
                    formData.append("fileType", @image);
                    for (var i = 0; i != files.length; i++) {
                        formData.append("files", files[i]);
                    }
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("UploadFiles", "Files", new { Area = "ControlPanel" })",
                        data: formData,
                        contentType: false,
                        processData: false,
                        headers: {
                            '@tokenSet.HeaderName': '@tokenSet.RequestToken'
                        },
                        success: function (result) {
                            if (Signature) {
                                $("#Input_Signature").val(result[0]);
                                $("#SignatureView").attr("src", result[0]);
                            }
                            else {
                                $("#Input_ProfilePhoto").val(result[0]);
                                $("#ProfilePhotoView").attr("src", result[0]);
                            }
                        },
                        error: function (req, status, error) {
                            alert("Error while adding the Image");
                        }
                    });
                } else {
                    alert("This browser doesn't support HTML5 file uploads!");
                }
            }
        }

        (function () {
            $.ajax({
                url: 'https://restcountries.com/v3.1/all',
                method: 'GET',
                dataType: 'json',
                success: function (data) {
                    var dropdown = document.getElementById('Input_PhoneNumberCode');
                    data.sort(function (a, b) {
                        var nameA = a.name.common.toUpperCase();
                        var nameB = b.name.common.toUpperCase();
                        if (nameA < nameB) {
                            return -1;
                        }
                        if (nameA > nameB) {
                            return 1;
                        }
                        return 0;
                    });
                    $.each(data, function (index, country) {
                        if (Object.keys(country?.idd).length != 0) {
                            var option = document.createElement('option');

                            var countryCode = country?.idd?.root + country?.idd?.suffixes[0];
                            if (country?.name?.common === "United States") {
                                countryCode = "+1"; // Manually set the country code for the United States
                            }

                            if ("@(selectedLang == "عربي")" == "True")
                                option.text = "(" + countryCode + ") " + country?.translations?.ara?.common;
                            else
                                option.text = "(" + countryCode + ") " + country?.name?.common;

                            option.value = countryCode;
                            dropdown.appendChild(option);
                        }
                    });
                    $('#Input_PhoneNumberCode').val("@Model.Input.PhoneNumberCode".replace("&#x2B;", "+")).trigger('chosen:updated');
                },
                error: function (xhr, status, error) {
                    console.log('Error: ' + error);
                }
            });
        })()

        async function GetCalendar() {
            var CalendarTitle = '@Localizer["Title :"]';
            var Calendardescription = '@Localizer["Description :"]';
            var Token = '@tokenSet.RequestToken';
            var fetchInfoStart;
            var fetchInfoEnd;
            var calendarEl = document.getElementById('calendar');
            var calendar = await new FullCalendar.Calendar(calendarEl, {
                timeZone: 'UTC',
                initialView: "dayGridMonth",
                initialDate: new Date().toISOString().split('T')[0],
                lazyFetching: false,
                navLinks: true, // can click day/week names to navigate views
                editable: false,
                responsive: true,
                eventLimit: true, // allow "more" link when too many events
                headerToolbar: {
                    left: "prev,next today",
                    center: "title",
                    right: "dayGridMonth,timeGridWeek,timeGridDay,listMonth"
                },
                eventClick: function (info) {
                    var eventObj = info.event;
                    $('#DetailsCalendar .modal-content .modal-title').html(CalendarTitle + ' ' + ((info.event.title) ? info.event.title : '--'));
                    $('#DetailsCalendar .modal-content .CalendarDescription').html(Calendardescription + ' <br /><br />' + ((info.event.extendedProps.description) ? info.event.extendedProps.description : '--'));
                    $('#DetailsCalendar').modal("show");
                },
                events: async function (fetchInfo, successCallback, failureCallback) {
                    ShowSpinner();
                    fetchInfoStart = fetchInfo.startStr;
                    fetchInfoEnd = fetchInfo.endStr;
                    await $.ajax({
                        type: "POST",
                        url: "@Url.Action("GetCalendarDataForProfile", "Calendar", new { Area = "" })",
                        data: {
                            Name: $("#txtCalendarSearch").val(),
                            TypeID: $("#ddlCalendarType").val(),
                            startDate: fetchInfo.startStr,
                            endDate: fetchInfo.endStr,
                        },
                        headers: {
                            'RequestVerificationToken': Token
                        },
                        success: function (result) {
                            var data = result.data;
                            HideSpinner();
                            var events = [];
                            $.each(data, function (i, item) {
                                events.push({
                                    title: data[i].name,
                                    start: data[i].startDate,
                                    end: data[i].endDate,
                                    color: "#00c0ef",
                                    description: data[i].description,
                                });
                            });
                            successCallback(events);
                            if (result.lang == 7) {
                                calendar.setOption('locale', 'ar');
                                calendar.setOption('direction', 'rtl');

                            }
                        }, error: function () {
                            HideSpinner();
                        }
                    });
                },
                eventColor: '#378006',
                loading: function (isLoading) {
                    if (isLoading) {
                        ShowSpinner();
                    }
                    else {
                        HideSpinner();
                        $(".fc-header-toolbar").removeClass("fc-toolbar-ltr");
                    }
                }
            })

            calendar.render();

            $("#btnCalendarSerach").click(function () {
                calendar.refetchEvents();
            });
            $("#txtExportCalendarData").click(function (e) {
                e.preventDefault();
                location.href = '/Calendar/ExportForGoogleCalendarForProfile?Name=' + $("#txtCalendarSearch").val() + '&TypeID=' + $("#ddlCalendarType").val() + '&startDate=' + fetchInfoStart + '&endDate=' + fetchInfoEnd + '';
            });
        }

    </script>

}