@using LearningManagementSystem.Core.SystemEnums
@using LearningManagementSystem.Services.Helpers
@model DataEntity.Models.ViewModels.GeneralContactViewModel
@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Antiforgery
@inject IAntiforgery Antiforgery

@{

    int image = (int)GeneralEnums.FileEnum.Image;
    var tokenSet = Antiforgery.GetAndStoreTokens(Context);

    var lookupName = new HashSet<string>()
{
        GeneralEnums.MasterLookupCodeEnums.Languages.ToString(), GeneralEnums.MasterLookupCodeEnums.Gender.ToString(),
        GeneralEnums.MasterLookupCodeEnums.Job.ToString(), GeneralEnums.MasterLookupCodeEnums.JobType.ToString(), GeneralEnums.MasterLookupCodeEnums.ContactTypes.ToString(),
        GeneralEnums.MasterLookupCodeEnums.PaymentWay.ToString(), GeneralEnums.MasterLookupCodeEnums.EducationalLevel.ToString(), GeneralEnums.MasterLookupCodeEnums.RightTime.ToString(),
        GeneralEnums.MasterLookupCodeEnums.CommunicationChannel.ToString(), GeneralEnums.MasterLookupCodeEnums.FirstSubChannel.ToString(), GeneralEnums.MasterLookupCodeEnums.SecondSubChannel.ToString(),
        GeneralEnums.MasterLookupCodeEnums.Campaign.ToString(), GeneralEnums.MasterLookupCodeEnums.GeneralSpecialty.ToString(), GeneralEnums.MasterLookupCodeEnums.TrainingConsultant.ToString(),
        GeneralEnums.MasterLookupCodeEnums.Colors.ToString()
    };
    var lookups = LookupHelper.GetLookupDetailsByMasterCode(lookupName, ViewBag.LangId);
    var colors = lookups[GeneralEnums.MasterLookupCodeEnums.Colors.ToString()];
    List<int> savedContractType = ViewBag.ContactType;
    var contractType = LookupHelper.GetContactType((int)ViewBag.LangId);
    var IsFullTime = "";
    var ShowInPages = "";
    if (Model.TrainerViewModel != null && Model.TrainerViewModel.IsFullTimeWorker.HasValue)
        IsFullTime = Model.TrainerViewModel.IsFullTimeWorker.Value.ToString()
            .ToLower();
    if (Model.TrainerViewModel != null && Model.TrainerViewModel.ShowInPages.HasValue)
        ShowInPages = Model.TrainerViewModel.ShowInPages.Value.ToString()
    .ToLower();

    var selectedDiv = contractType.Where(c => savedContractType.Contains(c.Value) && c.DivInfo != "")
.Select(c => c.DivInfo);

    string title = "Edit Contact";

    if (ViewBag.ContactTypeId != null && ViewBag.ContactTypeId > 0)
    {
        title = LookupHelper.GetContactEditPagesTitle()[ViewBag.ContactTypeId];
    }

    ViewData["Title"] = @Localizer[title];

    var paymentWay = lookups[GeneralEnums.MasterLookupCodeEnums.PaymentWay.ToString()];
    var educationalLevel = lookups[GeneralEnums.MasterLookupCodeEnums.EducationalLevel.ToString()];

    var languages = lookups[GeneralEnums.MasterLookupCodeEnums.Languages.ToString()];
    var gender = lookups[GeneralEnums.MasterLookupCodeEnums.Gender.ToString()];
    var job = lookups[GeneralEnums.MasterLookupCodeEnums.Job.ToString()];
    var jobType = lookups[GeneralEnums.MasterLookupCodeEnums.JobType.ToString()];
    var type = lookups[GeneralEnums.MasterLookupCodeEnums.ContactTypes.ToString()];
    var statuses = LookupHelper.GetStatuses((int)ViewBag.LangId);
    var roles = LookupHelper.GetActiveRoles(ViewBag.RoleId);
    var rightTime = lookups[GeneralEnums.MasterLookupCodeEnums.RightTime.ToString()];
    var communicationChannel = LookupHelper.GetCommunicationChannel(ViewBag.LangId);
    var campaign = lookups[GeneralEnums.MasterLookupCodeEnums.Campaign.ToString()];
    var generalSpecialty = lookups[GeneralEnums.MasterLookupCodeEnums.GeneralSpecialty.ToString()];
    var advisors = LookupHelper.GetAdvisersList();
    var cities = LookupHelper.GetCities((int)ViewBag.LangId, Model.ContactViewModel.CountryId);
    var countries = LookupHelper.GetCountries(ViewBag.LangId);

}

<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">
            <div class="d-flex tms-page-popup-title">
                <a onclick="CloseEditContact()" class="tms-close-div">
                    <i class="fa fa-close"></i>
                </a>
                <div class="tms-table-popup-title" style="width:97%;">
                    @Localizer[title]
                </div>
            </div>
            <div class="x_content">
                <br />
                <form id="ContactForm-Edit" class="form-horizontal form-label-left" action="/ControlPanel/UserProfiles/EditContact" method="post">
                    @Html.ValidationSummary(false, "", new { @class = "text-danger" })
                    <input type="hidden" value="@Model.ContactViewModel.Id" id="id" name="id" />
                    @Html.HiddenFor(r=>r.ContactViewModel.Id)
                    <div>
                        <h4 id="Title" style="color:#1dbebe">@Localizer["Contact Info"]</h4>
                    </div>
                    <hr />
                    @if (ViewBag.ContactTypeId == null || ViewBag.ContactTypeId == 0)
                    {
                        <div class="form-group" style="margin-bottom: 50px;" id="SelectContactType">
                            <p>@Localizer["Choose Contact Type"]</p>

                            <div class="col-md-12 d-flex flex-wrap col-md-offset-2">
                                @{
                                    int cnt = 0;

                                    foreach (var item in contractType)
                                    {
                                        if (cnt++ % 7 == 0)
                                        {
                                        }
                                        @:<div style="padding: 15px;">
                                            <input type="checkbox"
                                                   onclick="ToggleDivInfo(this, '@item.DivInfo')"
                                                   id="@cnt"
                                                   name="contactType"
                                                   value="@item.Value"
                                                   class="chk-contact"
                                                   @(Html.Raw(savedContractType.Contains(item.Value) ? "checked=\"checked\"" : "")) />
                                            <label for="@cnt">@Localizer[item.Text]</label>

                                        @:</div>
                                    }
                                    @:
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <input type="checkbox" style=" display:none"
                               name="contactType"
                               value="@ViewBag.ContactTypeId"
                               checked="checked" />
                    }
                    <div class="row">
                        <div class="col-lg-4 col-sm-12 col-xs-12 form-group">
                            <label class="col-xs-6 control-label tms-label" for="LanguageId">
                                @Localizer["Language"] <span class="required">*</span>
                            </label>
                            <div class="col-lg-12">
                                @Html.DropDownList("ContactViewModel.LanguageId", new SelectList(languages, "Id", "Name", ViewBag.LangId), Localizer["Select"].Value, new { @class = "form-control tms-ddl", required = "required", onchange = $"onDdlChanged({Model.ContactViewModel.Id},{ViewBag.ContactTypeId})" })
                                @Html.ValidationMessageFor(model => model.ContactViewModel.LanguageId, "", new { @class = "text-danger" })

                            </div>
                        </div>

                        <div class="col-lg-4 col-sm-12 col-xs-12 form-group ">
                            <label class="col-xs-6 control-label tms-label" for="FullName">
                                @Localizer["First Name"] <span class="required">*</span>
                            </label>
                            <div class="col-lg-12">
                                @Html.EditorFor(model => model.ContactViewModel.FirstName, new { htmlAttributes = new { required = "required", @class = "form-control tms-input" } })
                                @Html.ValidationMessageFor(model => model.ContactViewModel.FirstName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-lg-4 col-sm-12 col-xs-12 form-group ">
                            <label class="col-xs-6 control-label tms-label" for=".">
                                @Localizer["Second Name"]<span class="required">*</span>
                            </label>
                            <div class="col-lg-12">
                                @Html.EditorFor(model => model.ContactViewModel.SecondName, new { htmlAttributes = new {required = "required",  @class = "form-control tms-input" } })
                                @Html.ValidationMessageFor(model => model.ContactViewModel.SecondName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-lg-4 col-sm-12 col-xs-12 form-group">
                            <label class="col-xs-6 control-label tms-label" for="FullName">
                                @Localizer["Third Name"]<span class="required">*</span>
                            </label>
                            <div class="col-lg-12">
                                @Html.EditorFor(model => model.ContactViewModel.ThirdName, new { htmlAttributes = new {required = "required",  @class = "form-control tms-input" } })
                                @Html.ValidationMessageFor(model => model.ContactViewModel.ThirdName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-lg-4 col-sm-12 col-xs-12 form-group ">
                            <label class="col-xs-6 control-label tms-label" for="FullName">
                                @Localizer["Last Name"] <span class="required">*</span>
                            </label>
                            <div class="col-lg-12">
                                @Html.EditorFor(model => model.ContactViewModel.LastName, new { htmlAttributes = new { required = "required", @class = "form-control tms-input" } })
                                @Html.ValidationMessageFor(model => model.ContactViewModel.LastName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        @if (ViewBag.ContactTypeId == (int)GeneralEnums.ContactTypeEnum.Visetor)
                        {
                            <div class="col-lg-4 col-sm-12 col-xs-12 form-group">
                                <label class="col-xs-6 control-label tms-label" for="Email">
                                    @Localizer["Email"]
                                </label>
                                <div class="col-lg-12">
                                    @Html.EditorFor(model => model.ContactViewModel.Email, new { htmlAttributes = new { @class = "form-control tms-input", type = "email" } })
                                    @Html.ValidationMessageFor(model => model.ContactViewModel.Email, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="col-lg-4 col-sm-12 col-xs-12 form-group">
                                <label class="col-xs-6 control-label tms-label" for="Email">
                                    @Localizer["Email"]<span class="required">*</span>
                                </label>
                                <div class="col-lg-12">
                                    @Html.EditorFor(model => model.ContactViewModel.Email, new { htmlAttributes = new { @class = "form-control tms-input", required = "required", type = "email" } })
                                    @Html.ValidationMessageFor(model => model.ContactViewModel.Email, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        }

                         <div class="col-lg-4 col-sm-12 col-xs-12 form-group row w-100">
                                 <div class="col-5 px-0">
                                    <label class="col-xs-6 control-label tms-label" for="Mobile">
                                        @Localizer["Country Code"] <span class="required">*</span>
                                    </label>
                                    <div class="col-lg-12">
                                        @Html.DropDownList("ContactViewModel.PhoneNumberCode", new SelectList(new List<SelectListItem>()), Localizer["Other"].Value , new {required = "required", @class = "chosen-select" })
                                    </div>
                                </div>
                                <div class="col-7 px-0">
                                    <label class="col-xs-6 control-label tms-label" for="Mobile">
                                        @Localizer["Mobile"] <span class="required">*</span>
                                    </label>
                                    <div class="col-lg-12">
                                        @Html.EditorFor(model => model.ContactViewModel.Mobile, new { htmlAttributes = new { required = "required", @class = "form-control tms-input" } })
                                        @Html.ValidationMessageFor(model => model.ContactViewModel.Mobile, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                        @*<div class="col-lg-4 col-sm-12 col-xs-12 form-group">
                                <label class="col-xs-6 control-label tms-label" for="PhoneNumber">
                                    @Localizer["Phone Number"] <span class="required">*</span>
                                </label>
                                <div class="col-lg-12">
                                    @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { required = "required", @class = "form-control tms-input" } })
                                    @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                                </div>
                            </div>*@

                        <div class="col-lg-4 col-sm-12 col-xs-12 form-group">
                            <label class="col-xs-6 control-label tms-label" for="GenderLookupId">
                                @Localizer["Gender"]<span class="required">*</span>
                            </label>
                            <div class="col-lg-12">
                                @Html.DropDownList("ContactViewModel.GenderId", new SelectList(gender, "Id", "Name"), string.Empty, new { @class = "form-control chosen-select tms-ddl", required = "required" })
                                @Html.ValidationMessageFor(model => model.ContactViewModel.GenderId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-lg-4 col-sm-12 col-xs-12 form-group ">
                            <label class="col-xs-6 control-label tms-label" for="FullName">
                                @Localizer["Identity Number"]
                            </label>
                            <div class="col-lg-12">
                                @Html.EditorFor(model => model.ContactViewModel.IdNumber, new { htmlAttributes = new {@class = "form-control tms-input" } })
                                @Html.ValidationMessageFor(model => model.ContactViewModel.IdNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-lg-4 col-sm-12 col-xs-12 form-group">
                            <label class="col-xs-6 control-label tms-label" for="Status">
                                @Localizer["Status"]<span class="required">*</span>
                            </label>
                            <div class="col-lg-12">
                                @Html.DropDownList("ContactViewModel.Status", new SelectList(statuses, "Id", "Name"), string.Empty, new { @class = "form-control chosen-select tms-ddl", required = "required" })
                                @Html.ValidationMessageFor(model => model.ContactViewModel.Status, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="form-group" id="EmployeeInfo" style="display:none">
                        <div>
                            <h4 style="color:#1dbebe">@Localizer["Employee Info"]</h4>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="col-lg-4 col-sm-12 col-xs-12 form-group">
                                <label class="col-xs-6 control-label tms-label" for="Status">
                                    @Localizer["Start Work Date"]<span class="required">*</span>
                                </label>
                                <div class="col-lg-12">
                                    <input type="date" name="EmployeeViewModel.StartWorkDate" id="EmployeeViewModel.StartWorkDate" value="@($"{Model.EmployeeViewModel?.StartWorkDate?.Date.Year}-{Model.EmployeeViewModel?.StartWorkDate?.Date.Month:D2}-{Model.EmployeeViewModel?.StartWorkDate?.Date.Day:D2}")" class="form-control tms-input tms-ddl required-input" />
                                </div>
                            </div>
                            <div class="col-lg-4 col-sm-12 col-xs-12 form-group">
                                <label class="col-xs-6 control-label tms-label" for="Status">
                                    @Localizer["Job"]<span class="required">*</span>
                                </label>
                                <div class="col-lg-12">
                                    @Html.DropDownList("EmployeeViewModel.JobId", new SelectList(job, "Id", "Name"), Localizer["Select Job"].Value, new { @class = "form-control chosen-select tms-ddl tms-ddl required-input" })
                                </div>
                            </div>
                            <div class="col-lg-4 col-sm-12 col-xs-12 form-group">
                                <label class="col-xs-6 control-label tms-label" for="Status">
                                    @Localizer["Job Type"]<span class="required">*</span>
                                </label>
                                <div class="col-lg-12">
                                    @Html.DropDownList("EmployeeViewModel.JobTypeId", new SelectList(jobType, "Id", "Name"), Localizer["Select Job Type"].Value, new { @class = "form-control chosen-select tms-ddl tms-ddl required-input" })
                                </div>
                            </div>
                            <div class="col-lg-4 col-sm-12 col-xs-12 form-group">
                                <label class="col-xs-6 control-label tms-label" for="Address">
                                    @Localizer["Address"]<span class="required">*</span>
                                </label>
                                <div class="col-lg-12">
                                    @Html.EditorFor(model => model.EmployeeViewModel.Address, new { htmlAttributes = new { @class = "form-control tms-input tms-ddl required-input" } })
                                    @Html.ValidationMessageFor(model => model.EmployeeViewModel.Address, "", new { @class = "text-danger" })
                                </div>
                            </div>

                        </div>
                    </div>
                    <br />
                    <div class="form-group row" id="StudentInfo" style="display:none">
                        <div class="col-12">
                            <h4 style="color:#1dbebe">@Localizer["Student Info"]</h4>
                        </div>
                        <hr />

                        <div class="form-group col-6 col-md-6">
                            <label class="col-xs-6 control-label tms-label" for="EducationalLevelId">
                                @Localizer["Educational Level"] <span class="required">*</span>
                            </label>
                            <div class="col-lg-12">
                                @Html.DropDownList("StudentViewModel.EducationalLevelId", new SelectList(educationalLevel, "Id", "Name"), string.Empty, new { @class = "form-control chosen-select tms-ddl required-input" })
                                @Html.ValidationMessageFor(model => model.StudentViewModel.EducationalLevelId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group col-6 col-md-6">
                            <label class="col-xs-6 control-label tms-label" for="BirthDate">
                                @Localizer["Birth Date"]<span class="required">*</span>
                            </label>
                            <div class="col-lg-12">
                                <input class="form-control" id="StudentViewModel.BirthDate" name="StudentViewModel.BirthDate"
                                       type="date" value="@($"{Model.StudentViewModel?.BirthDate?.Date.Year}-{Model.StudentViewModel?.BirthDate?.Date.Month:D2}-{Model.StudentViewModel?.BirthDate?.Date.Day:D2}")">
                                @Html.ValidationMessageFor(model => model.StudentViewModel.BirthDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-6 col-md-6">
                            <label class="col-xs-6 control-label tms-label" for="Country">
                                @Localizer["Country"]<span class="required">*</span>
                            </label>
                            <div class="col-lg-12">
                                @Html.DropDownList("ContactViewModel.CountryId", new SelectList(countries, "Id", "Name"), string.Empty, new { @class = "form-control chosen-select tms-ddl required-input", onchange = "GetCountryCities3()" })
                                @Html.ValidationMessageFor(model => model.ContactViewModel.CountryId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group col-6 col-md-6">
                            <label class="col-xs-6 control-label tms-label" for="Country">
                                @Localizer["City"]<span class="required">*</span>
                            </label>
                            <div class="col-lg-12">
                                @Html.DropDownList("ContactViewModel.CityId", new SelectList(cities, "Id", "Name"), string.Empty, new { @class = "form-control chosen-select tms-ddl required-input" })
                                @Html.ValidationMessageFor(model => model.ContactViewModel.CityId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <br />

                    <div class="form-group row" id="TrainerInfo" style="display:none">
                        <div class="col-12">
                            <h4 style="color:#1dbebe">@Localizer["Trainer info"]</h4>
                        </div>
                        <hr />
                        <div class="col-lg-4 col-sm-12 col-xs-12 form-group">
                            <label class="col-xs-6 control-label tms-label" for="StartWorkDate">
                                @Localizer["Start Work Date"]<span class="required">*</span>
                            </label>
                            <div class="col-lg-12">
                                <input type="date" name="TrainerViewModel.StartWorkDate" id="TrainerViewModel.StartWorkDate" value="@($"{Model.TrainerViewModel?.StartWorkDate?.Date.Year}-{Model.TrainerViewModel?.StartWorkDate?.Date.Month:D2}-{Model.TrainerViewModel?.StartWorkDate?.Date.Day:D2}")" class="form-control tms-input tms-ddl" />
                                @Html.ValidationMessageFor(model => model.TrainerViewModel.StartWorkDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-lg-4 col-sm-12 col-xs-12 form-group">
                            <label class="col-xs-6 control-label tms-label" for="GeneralSpecialtyId">
                                @Localizer["General Specialty"]
                            </label>
                            <div class="col-lg-12">
                                @Html.DropDownList("TrainerViewModel.GeneralSpecialtyId", new SelectList(generalSpecialty, "Id", "Name"), Localizer["Select General Specialty"].Value, new { @class = "form-control chosen-select tms-ddl" })
                                @Html.ValidationMessageFor(model => model.TrainerViewModel.GeneralSpecialtyId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-lg-4 col-sm-12 col-xs-12 form-group">
                            <label class="col-xs-6 control-label tms-label" for="WorkHouers">
                                @Localizer["Work Hours"]<span class="required">*</span>
                            </label>
                            <div class="col-lg-12">
                                @Html.EditorFor(model => model.TrainerViewModel.WorkHouers, new { htmlAttributes = new { @class = "form-control tms-input tms-ddl required-input" } })
                                @Html.ValidationMessageFor(model => model.TrainerViewModel.WorkHouers, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-lg-4 col-sm-12 col-xs-12 form-group">
                            <label class="col-xs-6 control-label tms-label" for="IsFullTimeWorker">
                                @Localizer["Is Full Time Worker"]
                            </label>
                            <div class="col-lg-12">
                                <select class="chosen-select form-control tms-ddl" name="TrainerViewModel.IsFullTimeWorker" id="IsFullTimeWorker">
                                    <option value="">@Localizer["Is Full Time Worker ?"]</option>
                                    <option value="true">@Localizer["Yes"]</option>
                                    <option value="false">@Localizer["No"]</option>
                                </select>
                                @* @Html.EditorFor(model => model.TrainerViewModel.IsFullTimeWorker, new {htmlAttributes = new {@class = "form-control tms-input"}}) *@
                                @Html.ValidationMessageFor(model => model.TrainerViewModel.IsFullTimeWorker, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-lg-4 col-sm-12 col-xs-12 form-group">
                            <label class="col-xs-6 control-label tms-label" for="ShowInPages">
                                @Localizer["Show In Pages"]
                            </label>
                            <div class="col-lg-12">
                                <select class="chosen-select form-control tms-ddl" name="TrainerViewModel.ShowInPages" id="ShowInPages">
                                    <option value="">@Localizer["Show In Pages"]</option>
                                    <option value="true">@Localizer["Yes"]</option>
                                    <option value="false">@Localizer["No"]</option>
                                </select>
                                @Html.ValidationMessageFor(model => model.TrainerViewModel.ShowInPages, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-lg-4 col-sm-12 col-xs-12 form-group">
                            <label class="col-xs-6 control-label tms-label" for="ImageUrl">
                                @Localizer["Image Url"]
                            </label>
                            <div class="col-lg-12">
                                <label class="custom-file-upload">
                                    <input type="file" accept="image/*" onchange="UploadProfilePhoto(event)" />
                                    <i class="fa fa-upload px-2 pt-1"></i> @Localizer["Upload"]
                                </label>
                                @Html.HiddenFor(r => r.TrainerViewModel.ImageUrl)
                                @Html.ValidationMessageFor(model => model.TrainerViewModel.ImageUrl, "", new { @class = "text-danger" })
                            </div>
                        </div>
                         <div class="col-lg-4 col-sm-12 col-xs-12 form-group">
                            <label class="col-xs-6 control-label tms-label" for="TrainerViewModel_Signature">
                                @Localizer["Signature"]
                            </label>
                            <div class="col-lg-12">
                                 <label class="custom-file-upload">
                                    <input type="file" accept="image/*" onchange="UploadProfilePhoto(event,true)" />
                                    <i class="fa fa-upload px-2 pt-1"></i> @Localizer["Upload"]
                                </label>
                                @Html.HiddenFor(r => r.TrainerViewModel.Signature)
                                @Html.ValidationMessageFor(model => model.TrainerViewModel.Signature, "", new { @class = "text-danger" })
                                <img src="@(Model.TrainerViewModel?.Signature??"")" id="SignatureView" style="width:100%;height:100px" class="mt-2 rounded" alt="">
                            </div>
                        </div>
                        <div class="form-group col-lg-12 col-sm-12 col-xs-12" id="QuestionDescriptionDiv">
                            <label class="control-label col-md-12 col-sm-3 col-xs-12 tms-label" for="QuestionDescription">
                                @Localizer["Description"]
                            </label>
                            <div class="col-md-12 col-sm-6 col-xs-12">
                                @Html.TextAreaFor(model => model.TrainerViewModel.Description, new { @class = "tinyRichText" })
                            </div>
                        </div>

                    </div>
                    <br />
                    <br />
                    <hr />
                    <div style="text-align:center">
                        <div class="btn-group btn-group-toggle" data-toggle="buttons">
                            <label class="btn btn-secondary mx-2">
                                <input type="radio" name="IsUser" value="@((int) GeneralEnums.UserEnum.IsUser)" id="IsUser" onchange="Toggle()" autocomplete="off"> @Localizer["Is User"]
                            </label>
                            <label class="active btn btn-secondary">
                                <input type="radio" name="IsUser" value="@((int) GeneralEnums.UserEnum.NotUser)" id="NotUser" onchange="Toggle()" autocomplete="off">@Localizer["Not User"]
                            </label>
                        </div>
                    </div>

                    <div id="UserInfo" style="@(Model.IsUser == (int) GeneralEnums.UserEnum.IsUser ? "" : "display:none")">
                        <div>
                            <h4 style="color:#1dbebe">@Localizer["User Info"]</h4>
                        </div>
                        <hr />
                        <div class="row">
                            @if (Model.IsUser != (int)GeneralEnums.UserEnum.IsUser)
                            {
                                <div class="col-12 form-group">
                                    <label class="col-xs-6 control-label tms-label" for="Password">
                                        @Localizer["Password"]<span class="required">*</span>
                                    </label>
                                    <div class="col-lg-12">
                                        @Html.EditorFor(model => model.UserProfileViewModel.Password, new { htmlAttributes = new { type = "password", @class = "form-control tms-input" } })
                                        @Html.ValidationMessageFor(model => model.UserProfileViewModel.Password, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-12 form-group">
                                    <label class="col-xs-6 control-label tms-label" for="ConfirmPassword">
                                        @Localizer["Confirm Password"] <span class="required">*</span>
                                    </label>
                                    <div class="col-lg-12">
                                        @Html.EditorFor(model => model.UserProfileViewModel.ConfirmPassword, new { htmlAttributes = new { type = "password", @class = "form-control tms-input" } })
                                        @Html.ValidationMessageFor(model => model.UserProfileViewModel.ConfirmPassword, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }
                            

                            <div class="col-lg-12 col-sm-12 col-xs-12 form-group">
                                <label class="col-xs-6 control-label tms-label" for="Status">
                                    @Localizer["Choose Role"]
                                </label>
                                <div class="col-lg-12">

                                    <select id="UserProfileViewModel.RoleIds" name="UserProfileViewModel.RoleIds" multiple class="chosen-select form-control tms-ddl select_Roles" style="height:60px" >
                                        @foreach (var role in roles)
                                        {
                                            <option value="@role.Id">@role.Name</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="text-center mt-3">
                        @if (Model.UserProfileViewModel.Status == (int)GeneralEnums.StatusEnum.Deleted)
                        {
                            <button type="button" onclick="ReactivateAccount('@Model.ContactViewModel.Id')" class="tms-save-btn" style="background-color:orange">
                                @Localizer["Reactivate Account"]
                            </button>
                        }
                        <button type="button" onclick="EditContact()" class="tms-save-btn">
                            <i class="fa fa-save"></i> @Localizer["Saving Changes"]
                        </button>
                    </div>
                 </form>
            </div>
        </div>
    </div>
</div>

<script>
     (function () {
            $.ajax({
                url: 'https://restcountries.com/v3.1/all',
                method: 'GET',
                dataType: 'json',
                success: function (data) {
                    var dropdown = document.getElementById('ContactViewModel_PhoneNumberCode');
                    data.sort(function (a, b) {
                        var nameA = a.name.common.toUpperCase();
                        var nameB = b.name.common.toUpperCase();
                        if (nameA < nameB) {
                            return -1;
                        }
                        if (nameA > nameB) {
                            return 1;
                        }
                        return 0;
                    });
                  $.each(data, function (index, country) {
                        if (Object.keys(country?.idd).length != 0) {
                            var option = document.createElement('option');

                            var countryCode = country?.idd?.root + country?.idd?.suffixes[0];
                            if (country?.name?.common === "United States") {
                                countryCode = "+1"; // Manually set the country code for the United States
                            }

                            if ("@(ViewBag.LangId == 7)" == "True")
                                option.text = "(" + countryCode + ") " + country?.translations?.ara?.common;
                            else
                                option.text = "(" + countryCode + ") " + country?.name?.common;

                            option.value = countryCode;
                            dropdown.appendChild(option);
                        }
                    });
                    $('#ContactViewModel_PhoneNumberCode').val("@Model.ContactViewModel.PhoneNumberCode".replace("&#x2B;", "+")).trigger('chosen:updated');
                },
                error: function (xhr, status, error) {
                    console.log('Error: ' + error);
                }
            });
        })()
</script>

<script>
    InitTinymce();

    obj = '@Html.Raw(Json.Serialize(Model))';
    model = JSON.parse(obj.replace(/\s/g, ''));
</script>

<script>
    $('#IsFullTimeWorker').val('@IsFullTime');
    $('#IsFullTimeWorker').trigger("chosen:updated");

    $('#ShowInPages').val('@ShowInPages');
    $('#ShowInPages').trigger("chosen:updated");

</script>
<script>
    function Toggle() {
        if ($('input[name="IsUser"]:checked').val() == @((int) GeneralEnums.UserEnum.IsUser))
        {
            $('#UserInfo').show();
        }
        else
        {
            $('#UserInfo').hide();
        }
    }

       function ToggleDivInfo(box, id) {
            if (box.checked == false) {
                HideDivInfo(id);

                if (id == "VisitorInfo") {
                    $('#ContactViewModel_Email').prop('required', true);
                    $('#ContactViewModel_Email').parent().parent().find("label").html("@Localizer["Email"] <span class ='required'>*</span>")
                }
            } 
            else {
                ShowDivInfo(id);

                if (id == "VisitorInfo") {
                    $('#ContactViewModel_Email').prop('required', false);
                    $('#ContactViewModel_Email').parent().parent().find("label").html("@Localizer["Email"]");
                } else {
                    $('#ContactViewModel_Email').prop('required', true);
                    $('#ContactViewModel_Email').parent().parent().find("label").html("@Localizer["Email"] <span class ='required'>*</span>");
                }
            }

          if (id === 'StudentInfo') {
              let checkboxes = document.querySelectorAll('.chk-contact');
              for (let i = 0; i < checkboxes.length; i++) {
                  if (checkboxes[i] !== box) {
                      checkboxes[i].checked = false;
                  }
              }
              HideDivInfo("TrainerInfo");
              HideDivInfo("EmployeeInfo");
          } else {
              let checkboxes = document.querySelectorAll('.chk-contact');
              checkboxes[0].checked = false;
              HideDivInfo("StudentInfo");
          }
        }


        function ShowDivInfo(id)
        {
            $("#" + id + ' .tms-ddl required-input').prop('required', true);
            $("#" + id ).show();
        }

        function HideDivInfo(id)
        {
            $("#" + id + ' .tms-ddl required-input').prop('required', false);
            $("#" + id).hide();
        }
</script>

<script>
    $(document).ready(function () {
        $('#VistorViewModel_CommunicationChannelId').trigger("change");
        $('#LeadViewModel_CommunicationChannelId').trigger("change");
        $('#StudentViewModel_CommunicationChannelId').trigger("change");

            $('[id="ContactViewModel_LanguageId"]').val(@ViewBag.LangId);

            if (@((Model.IsUser != (int) GeneralEnums.UserEnum.IsUser).ToString().ToLower()))
            {
                Toggle();
                $("#NotUser").attr("checked",true);
            }else{
                $("#IsUser").attr("checked",true);
                $("#NotUser").removeAttr("checked");
                $("#NotUser").parent().removeClass("active");
                $("#IsUser").parent().addClass("active");
            }

            var array = @Html.Raw(Json.Serialize(selectedDiv));

            for (var i = 0; i < array.length; i++)
            {
            ShowDivInfo(array[i]);
            }

             $.validator.addMethod("phoneNumber", function (value, element) {
    var phoneNumber = /^(\+)?[0-9]{9,12}$/;
    return this.optional(element) || phoneNumber.test(value);
        }, '@Localizer["Please enter a valid 9 to 12-digit phone number."]');

        $("#ContactForm-Edit").validate({
            rules: {
                "ContactViewModel.Mobile": {
                    required: true
                }
            }
        });
    });


</script>
<script>
    $('#VistorViewModel_CommunicationChannelId').on('change', function () {
        $.ajax({
            type: "GET",
            dataType: "json",
            url: "/ControlPanel/SubCommunicationChannels/GetFirstSubChannel/",
            data: { communicationChannelId: this.value },
            success: function (data) {
                var firstSubChannel = $("#VistorViewModel_FirstSubChannelId");
                var secondSubChannel = $("#VistorViewModel_SecondSubChannelId");
                secondSubChannel.empty();
                firstSubChannel.empty();
                firstSubChannel.append($("<option />").val("").text("@Localizer["Choose First Sub Channel"]"));
                $.each(data, function () {
                    var option = $("<option />").val(this.id).text(this.name);

                    firstSubChannel.append(option);
                });

                firstSubChannel.trigger("change");


            }
        });
    });

    $('#VistorViewModel_FirstSubChannelId').on('change', function () {
        $.ajax({
            type: "GET",
            dataType: "json",
            url: "/ControlPanel/SubCommunicationChannels/GetSecondSubChannel/",
            data: { communicationChannelId: $('#VistorViewModel_CommunicationChannelId').val(), parentId: this.value },
            success: function (data) {
                var secondSubChannel = $("#VistorViewModel_SecondSubChannelId");
                secondSubChannel.empty();
                secondSubChannel.append($("<option />").val("").text("@Localizer["Choose Second Sub Channel"]"));
                $.each(data, function () {
                    var option = $("<option />").val(this.id).text(this.name);
                    secondSubChannel.append(option);
                });

            }
        });
    });

</script>

<script>
    $('#LeadViewModel_CommunicationChannelId').on('change', function () {
        $.ajax({
            type: "GET",
            dataType: "json",
            url: "/ControlPanel/SubCommunicationChannels/GetFirstSubChannel/",
            data: { communicationChannelId: this.value },
            success: function (data) {
                var firstSubChannel = $("#LeadViewModel_FirstSubChannelId");
                var secondSubChannel = $("#LeadViewModel_SecondSubChannelId");
                secondSubChannel.empty();
                firstSubChannel.empty();
                firstSubChannel.append($("<option />").val("").text("@Localizer["Choose First Sub Channel"]"));
                $.each(data, function () {
                    var option = $("<option />").val(this.id).text(this.name);
                    firstSubChannel.append(option);
                });

                 firstSubChannel.trigger("chosen:updated");
            }
        });
    });

    $('#LeadViewModel_FirstSubChannelId').on('change', function () {
        $.ajax({
            type: "GET",
            dataType: "json",
            url: "/ControlPanel/SubCommunicationChannels/GetSecondSubChannel/",
            data: { communicationChannelId: $('#LeadViewModel_CommunicationChannelId').val(), parentId: this.value },
            success: function (data) {
                var secondSubChannel = $("#LeadViewModel_SecondSubChannelId");
                secondSubChannel.empty();
                secondSubChannel.append($("<option />").val("").text("@Localizer["Choose Second Sub Channel"]"));
                $.each(data, function () {
                    var option = $("<option />").val(this.id).text(this.name);
                    secondSubChannel.append(option);
                });
            }
        });
    });
</script>

<script>
    $('#StudentViewModel_CommunicationChannelId').on('change', function () {
        $.ajax({
            type: "GET",
            dataType: "json",
            url: "/ControlPanel/SubCommunicationChannels/GetFirstSubChannel/",
            data: { communicationChannelId: this.value },
            success: function (data) {
                var firstSubChannel = $("#StudentViewModel_FirstSubChannelId");
                var secondSubChannel = $("#StudentViewModel_SecondSubChannelId");
                secondSubChannel.empty();
                firstSubChannel.empty();
                firstSubChannel.append($("<option />").val("").text("@Localizer["Choose First Sub Channel"]"));
                $.each(data, function () {
                    var option = $("<option />").val(this.id).text(this.name);
                    firstSubChannel.append(option);
                     firstSubChannel.trigger("chosen:updated");

                });
                      firstSubChannel.val(@Model.StudentViewModel?.FirstSubChannelId);
                firstSubChannel.trigger("change")

                 firstSubChannel.trigger("chosen:updated");
            }
        });
    });

    $('#StudentViewModel_FirstSubChannelId').on('change', function () {
        $.ajax({
            type: "GET",
            dataType: "json",
            url: "/ControlPanel/SubCommunicationChannels/GetSecondSubChannel/",
            data: { communicationChannelId: $('#StudentViewModel_CommunicationChannelId').val(), parentId: this.value },
            success: function (data) {
                var secondSubChannel = $("#StudentViewModel_SecondSubChannelId");
                secondSubChannel.empty();
                secondSubChannel.append($("<option />").val("").text("@Localizer["Choose Second Sub Channel"]"));
                $.each(data, function () {
                    var option = $("<option />").val(this.id).text(this.name);
                    secondSubChannel.append(option);
                    secondSubChannel.trigger("chosen:updated");
                });
                        secondSubChannel.val(@Model.StudentViewModel?.SecondSubChannelId);
                 secondSubChannel.trigger("chosen:updated");
            }
        });
    });



     function UploadProfilePhoto(e,Signature) {
         var files = e.target.files;
         debugger;
        if (files.length > 0) {
            if (window.FormData !== undefined) {
                var formData = new FormData();
                formData.append("fileType", @image);
                for (var i = 0; i != files.length; i++) {
                    formData.append("files", files[i]);
                }
                 $.ajax({
                    type: "POST",
                    url: "@Url.Action("UploadFiles", "Files", new {Area = "ControlPanel"})",
                    data: formData,
                    contentType: false,
                    processData: false,
                    headers: {
                    '@tokenSet.HeaderName' : '@tokenSet.RequestToken'
                    },
                     success: function (result) {
                         if(Signature){
                            $("#TrainerViewModel_Signature").val(result[0]);
                            $("#SignatureView").attr("src", result[0]);
                         }
                         else
                            $("#TrainerViewModel_ImageUrl").val(result[0]);
                    },
                     error: function (req, status, error) {
                        alert("Error while adding the Image");
                    }
                 });
            } else {
                 alert("This browser doesn't support HTML5 file uploads!");
            }
        }
    }


</script>
