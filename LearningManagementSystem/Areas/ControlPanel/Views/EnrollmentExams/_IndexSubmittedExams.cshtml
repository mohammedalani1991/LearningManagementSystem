@using DataEntity.Models.EfModels
@using LearningManagementSystem.Core.SystemEnums
@using LearningManagementSystem.Services.Helpers
@using DataEntity.Models.ViewModels
@using X.PagedList.Web.Common
@using X.PagedList.Mvc.Core
@model X.PagedList.IPagedList<DataEntity.Models.EfModels.EnrollStudentExam>
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
    var paginations = LookupHelper.GetLookupDetailsByMasterCode(GeneralEnums.MasterLookupCodeEnums.Pagination.ToString(), ViewBag.LangId);
    var paginationValue = ViewBag.PaginationValue;

}
<div class="col-md-12 col-sm-12 col-xs-12 tms-page">
    <div class="x_panel bg-transparent">
        <div class="tms-page-title d-flex">
            <div class="tms-title">
            </div>
        </div>
        <div class="x_content">
            <div class="table-responsive">
                <table class="tms-table">
                    <thead>
                        <tr class="tms-headings">
                            <th>
                                @Localizer["Student Name"]
                            </th>
                            <th>
                                @Localizer["Final Mark"]
                            </th>
                            <th>
                                @Localizer["Mark He Got"]
                            </th>
                            <th>
                                @Localizer["Mark After Conversion"]
                            </th>
                            <th>
                                @Localizer["Created On"]
                            </th>
                            <th>

                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Count == 0)
                        {
                            <tr class="tms-tr">
                                <td colspan="5">@Localizer["No data available in the table"] </td>
                            </tr>
                        }
                        @foreach (var item in Model)
                        {
                            <tr class="tms-tr">

                                @{
                                    var FinalMark = ((item.FinalMark.HasValue) ? item.FinalMark : 0);
                                    var MarkHeGot = ((item.MarkHeGot.HasValue) ? item.MarkHeGot : 0);
                                    var MarkAfterConversion = ((item.MarkAfterConversion.HasValue) ? item.MarkAfterConversion : 0);
                                    var LastExamIDForStudent = LookupHelper.GetEnrollStudentExamByEnrollStudentCourseId(item.EnrollStudentCourseId, item.EnrollCourseExamId);
                                }
                                <td>

                                    @Html.DisplayFor(modelItem => item.EnrollStudentCourse.Student.Contact.FullName)
                                </td>
                                <td>

                                    @Html.DisplayFor(modelItem => FinalMark)
                                </td>
                                <td>

                                    @Html.DisplayFor(modelItem => MarkHeGot)
                                </td>

                                <td>

                                    @Html.DisplayFor(modelItem => MarkAfterConversion)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.CreatedOn)
                                </td>
                                <td>
                                    @if (LastExamIDForStudent?.EnrollStudentExamAnswers?.Count != item.EnrollCourseExam?.EnrollCourseExamQuestions?.Count)
                                    {
                                        <button class="btn btn-primary" onclick="ShowExamCorrection(@item.EnrollCourseExamId,@item.Id)" type="button"><i class="fa fa-save"></i> @Localizer["Exam Correction"]</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-primary" onclick="TrainerShowExamView(@item.EnrollCourseExamId,@item.Id)" type="button"><i class="fa fa-save"></i> @Localizer["View Exam"]</button>
                                    }

                                </td>


                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="paddtop-Page">
                @if (Model.PageCount > 0)
                {
                    <div class="paging-div">
                        @Html.PagedListPager(Model, page => Url.Action("ShowSubmittedExams", new { page, id = ViewBag.id }), PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new AjaxOptions() { HttpMethod = "GET", UpdateTargetId = "ShowSubmittedExamsDiv" }))
                        <div class="d-flex justify-content-center">@Localizer["Page"] <p class="text-danger px-1">@(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber)</p>@Localizer["from"] <p class="text-primary px-1">@Model.PageCount</p> @Localizer["Item No:"]  <p class="text-primary px-1">@Model.TotalItemCount</p> </div>
                    </div>
                }

            </div>
        </div>
    </div>
</div>



