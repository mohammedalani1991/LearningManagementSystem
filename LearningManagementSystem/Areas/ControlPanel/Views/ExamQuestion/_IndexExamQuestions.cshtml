@using DataEntity.Models.EfModels
@using LearningManagementSystem.Core.SystemEnums
@using LearningManagementSystem.Services.Helpers
@using DataEntity.Models.ViewModels
@using X.PagedList.Web.Common
@using X.PagedList.Mvc.Core
@model X.PagedList.IPagedList<DataEntity.Models.EfModels.ExamQuestion>
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
    var paginations = LookupHelper.GetLookupDetailsByMasterCode(GeneralEnums.MasterLookupCodeEnums.Pagination.ToString(), ViewBag.LangId);
    var paginationValue = ViewBag.PaginationValue;
    List<StatusViewModel> questionType = LookupHelper.GetQuestionsType(ViewBag.LangId);
}

<div class="col-md-12 col-sm-12 col-xs-12 tms-page">
    <div class="x_panel bg-transparent">
        <div class="x_content">
            <div class="table-responsive">

                    <div class="x_panel bg-transparent">
                        <div class="tms-page-title d-flex">
                            <div class="tms-title" style="width: 40%;">
                                <h4><small>@Localizer["The number of questions in the template:"] <span class="NumberSelectedQuestions">@ViewBag.ExamQuestionsCount</span></small></h4>
                            </div>
                 </div>
                  </div>

                <table class="tms-table">
                    <thead>
                        <tr class="tms-headings">
                      
                            <th class="Name ">
                                @Localizer["Question Name"]
                            </th>

                            <th class="Type ">
                                @Localizer["Type"]
                            </th>
                            <th class="Mark">
                                @Localizer["Mark"]
                            </th>
                            <th class="Status ">
                                @Localizer["Status"]
                            </th>
                      
                            <th class="CreatedOn ">
                                @Localizer["Created On"]
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                       @if (Model.Count == 0)
                        {
                            <tr class="tms-tr">
                                <td colspan="8">@Localizer["No questions matching the filter !"] </td>
                            </tr>
                        }
                        @foreach (var item in Model)
                        {
                            <tr class="tms-tr">
                       
                                <td class="Name ">
                                    @Html.DisplayFor(modelItem => item.Question.Name)
                                </td>
                                <td class="Type ">
                                    @(questionType.FirstOrDefault(r=>r.Id==item.Question.Type)?.Name??"")
                                </td>
                                         <td class="Mark">
                                    @Html.DisplayFor(modelItem => item.Question.Mark)
                                </td>
                                <td class="Status ">
                                    @LookupHelper.GetStatusById(item.Status)?.Name
                                </td>
                     
                                <td class="CreatedOn ">
                                    @Html.DisplayFor(modelItem => item.CreatedOn)
                                </td>
       
                            </tr>
                        }
                    </tbody>
                </table>

                @if (Model.PageCount > 0)
                {
                    <div class="paging-div">
                    @Html.PagedListPager(Model, page => Url.Action("ShowExamQuestions", new { page, id=ViewBag.id}), PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new AjaxOptions() { HttpMethod = "GET", UpdateTargetId = "ShowExamQuestionsDiv" }))
                   </div>

                }
            </div>
        </div>
    </div>
</div>

