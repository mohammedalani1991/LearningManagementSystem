@using LearningManagementSystem.Services.Helpers
@using LearningManagementSystem.Core.SystemEnums
@using LearningManagementSystem.Core
@using X.PagedList.Web.Common
@using X.PagedList.Mvc.Core
@model X.PagedList.IPagedList<DataEntity.Models.EfModels.PracticalQuestion>
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using DataEntity.Models.EfModels

@{
    var lookupName = new HashSet<string>() { GeneralEnums.MasterLookupCodeEnums.PracticalQuestionType.ToString() };
    var lookups = LookupHelper.GetLookupDetailsByMasterCode(lookupName, ViewBag.LangId);
    var types = lookups[GeneralEnums.MasterLookupCodeEnums.PracticalQuestionType.ToString()];


    var paginations = LookupHelper.GetLookupDetailsByMasterCode(GeneralEnums.MasterLookupCodeEnums.Pagination.ToString(), ViewBag.LangId);
    var paginationValue = ViewBag.PaginationValue;
    var questions = (List<PracticalExamQuestion>)ViewBag.Questions;
}

<div class="col-md-12 col-sm-12 col-xs-12 tms-page" id="QuestionsGetData">
    <div class="x_panel bg-transparent">
        <div class="tms-page-title d-flex">
            <div class="tms-title">
                <h4>@Localizer["Ratings"] <small>@ViewData["Title"]</small></h4>
            </div>
            <div class="tms-action d-flex justify-content-end">
                <div class="col-md-7 col-sm-12 col-xs-12">
                    <form data-ajax="true" method="get" action="/ControlPanel/PracticalExams/GetQuestions" id="Form2" data-ajax-success="GetData1" data-ajax-begin="ShowSpinner" data-ajax-complete="HideSpinner">
                        <div class="d-flex justify-content-end">
                            @Html.Hidden("PracticalExamId")
                            @Html.Hidden("pagination1")
                            @Html.Hidden("page1")                           
                            <div class="col-md-6 col-sm-3 col-xs-12">
                                @Html.DropDownList("TypeId",new SelectList(types, "Id", "Name"),  Localizer["Type"].Value, new { @class = "form-control chosen-select tms-ddl" })
                            </div>
                            <div class="col-md-6 col-sm-3 col-xs-12">
                                @Html.TextBox("searchText1", null, new { @class = "form-control search-control tms-search-input", placeholder = Localizer["Search For ..."].Value })
                            </div>
                            <div>
                                <input class="btn btn-primary" type="submit" value=@Localizer["Search"] />
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div class="x_content">
            <div class="table-responsive">
                <table class="tms-table">
                    <thead>
                        <tr class="tms-headings">
                            <th>
                            </th>
                            <th>
                                @Localizer["Name"]
                            </th>
                            <th>
                                @Localizer["Mark"]
                            </th>
                            <th>
                                @Localizer["Type"]
                            </th>
                            <th>
                                @Localizer["Created By"]
                            </th>
                            <th>
                                @Localizer["Created On"]
                            </th>
                            <th>
                                @Html.DropDownList("pagin1", new SelectList(paginations, "Code", "Name", paginationValue), null, new { @class = "mx-3 p-1 rounded", style = "max-height: 26px;min-width: 49px;", required = "required", @onchange = "ChangePagenation1()" })
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Count == 0)
                        {
                            <tr class="tms-tr">
                                <td colspan="10">@Localizer["No data available in the table"] </td>
                            </tr>
                        }
                        @foreach (var item in Model)
                        {
                            <tr class="tms-tr">
                                <td>
                                    @if (questions.Select(s => s.PracticalQuestionId).Contains(item.Id))
                                    {
                                        <input attr-practicalExam-id="@ViewBag.PracticalExamId" attr-Question-id="@item.Id" type="checkbox" checked />
                                    }
                                    else
                                    {
                                        <input attr-practicalExam-id="@ViewBag.PracticalExamId" attr-Question-id="@item.Id" type="checkbox" />
                                    }
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Name)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Mark)
                                </td>
                                <td>
                                    @LookupHelper.GetLookupDetailsById(item.Type??0 , (int)ViewBag.LangId)?.Name
                                </td>
                                <td>
                                    @LookupHelper.GetFullNameByEmail(item.CreatedBy ,(int)ViewBag.LangId)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.CreatedOn)
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                @if (Model.PageCount > 0)
                {
                    <div class="paging-div">
                        @Html.PagedListPager(Model, page1 => Url.Action("GetQuestions", new { page1, searchText1 = ViewBag.searchText1, PracticalExamId = ViewBag.PracticalExamId, TypeId = ViewBag.TypeId }), PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new AjaxOptions() { HttpMethod = "GET", UpdateTargetId = "AddQuestionsDiv" }))
                        <div class="d-flex justify-content-center">@Localizer["Page"] <p class="text-danger px-1">@(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber)</p>@Localizer["from"] <p class="text-primary px-1">@Model.PageCount</p> @Localizer["Item No:"]  <p class="text-primary px-1">@Model.TotalItemCount</p> </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<script>
    $("#QuestionsGetData").off("click").on("click", "[attr-practicalExam-id]", function () {
        ShowSpinner();
        var PracticalExamId = $(this).attr("attr-practicalExam-id");
        var Questionid = $(this).attr("attr-Question-id");
        var checkedRow = $(this).is(":checked");
        var checkbox = $(this).find("[attr-practicalExam-id='" + PracticalExamId + "']").prevObject;
        $.ajax({
            type: "Post",
            url: "/ControlPanel/PracticalExams/AddOrRemoveQuestions/",
            data: { PracticalExamId: PracticalExamId, Questionid: Questionid, checkedRow: checkedRow },
            success: function (data) {
                if (data == "Ok") {
                    toastr.success(editMassege);
                    HideSpinner();
                }
                else {
                    HideSpinner();
                    toastr.error(editMassegeError);
                    if (checkbox[0].checked == true)
                        checkbox.prop("checked", false);
                    else
                        checkbox.prop("checked", true);
                }
            },
            error: function (data) {
                HideSpinner();
                toastr.error(editMassegeError);
                if (checkbox[0].checked == true)
                    checkbox.prop("checked", false);
                else
                    checkbox.prop("checked", true);
            },
        });

    });
</script>