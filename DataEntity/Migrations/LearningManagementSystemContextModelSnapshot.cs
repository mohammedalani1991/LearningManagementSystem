// <auto-generated />
using System;
using DataEntity.Models.EfModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataEntity.Migrations
{
    [DbContext(typeof(LearningManagementSystemContext))]
    partial class LearningManagementSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataEntity.Models.EfModels.AboutDic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("GroupName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AboutDic");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AboutDicTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AboutDicId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AboutDicId");

                    b.ToTable("AboutDicTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AcademicSupervisionRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("EnrollTeacherCourseId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rate")
                        .HasColumnType("int");

                    b.Property<int?>("StandardId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollTeacherCourseId");

                    b.HasIndex("StandardId");

                    b.ToTable("AcademicSupervisionRate");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AcademicSupervisionStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Standard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AcademicSupervisionStandard");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AcademicSupervisionStandardTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcademicSupervisionStandardId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Standard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicSupervisionStandardId");

                    b.ToTable("AcademicSupervisionStandardTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AspNetUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AssignmentTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.ToTable("AssignmentTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AbsenceNote")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("FromHour")
                        .HasColumnType("time");

                    b.Property<bool?>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("ToHour")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RequestDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.BranchTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Calendar");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CalendarTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CalendarId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.ToTable("CalendarTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CertificateAdoption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("SemesterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("SemesterId");

                    b.ToTable("CertificateAdoption");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CityTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsCatery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<bool?>("ShowInHomePage")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("CmsCatery");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsCateryTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CateryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CateryId");

                    b.ToTable("CmsCateryTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AllowComment")
                        .HasColumnType("bit");

                    b.Property<int?>("CateryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ShowInHomePage")
                        .HasColumnType("bit");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CateryId");

                    b.ToTable("CmsPage");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsPageTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("CmsPageTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("OneObjectFees")
                        .HasColumnType("float");

                    b.Property<int?>("PaymentType")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectCategoryId")
                        .HasColumnType("int");

                    b.Property<double?>("ProjectCost")
                        .HasColumnType("float");

                    b.Property<int?>("ProjectStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SecondDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ShowInHomePage")
                        .HasColumnType("bit");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TargetQty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCategoryId");

                    b.ToTable("CmsProject");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsProjectCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CmsProjectCategory");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsProjectCategoryTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCategoryId");

                    b.ToTable("CmsProjectCategoryTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsProjectCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsOther")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("CmsProjectCost");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsProjectCostTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectCostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCostId");

                    b.ToTable("CmsProjectCostTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsProjectDonor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProjectCostId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCostId");

                    b.HasIndex("ProjectId");

                    b.ToTable("CmsProjectDonor");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsProjectResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("CmsProjectResource");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsProjectTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("SecondDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("CmsProjectTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsSlider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReadMoreLink")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CmsSlider");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsSliderTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SliderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SliderId");

                    b.ToTable("CmsSliderTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsWhatPeopleSay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ShowInHomePage")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CmsWhatPeopleSay");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsWhatPeopleSayTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("PeopleId")
                        .HasColumnType("int");

                    b.Property<string>("PersonDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PeopleId");

                    b.ToTable("CmsWhatPeopleSayTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CommunicationChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CommunicationChannel");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CommunicationChannelTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommunicationChannelId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CommunicationChannelId");

                    b.ToTable("CommunicationChannelTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CommunicationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactType")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsForExtraType")
                        .HasColumnType("bit");

                    b.Property<string>("LogText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("TypeText")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("CommunicationLogs");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<int?>("Language")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumberCode")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("ThirdName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ContactTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ThirdName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactType");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ContactU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CountryTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcquiredSkills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("AssignmentMark")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseDuration")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("CoursePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LearningMethodId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ListeningExamMark")
                        .HasColumnType("decimal(8,2)");

                    b.Property<bool?>("NeedQuestion")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ShowInHomePage")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("SuccessMark")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("TargetGroup")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CourseAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AbsenceNote")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("EnrollStudentCourseId")
                        .HasColumnType("int");

                    b.Property<int?>("EnrollTeacherCourseId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollStudentCourseId");

                    b.HasIndex("EnrollTeacherCourseId");

                    b.ToTable("CourseAttendance");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CourseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<bool?>("ShowInHomePage")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("CourseCategory");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CourseCategoryTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CourseCategoryTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CourseCertification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TemplateHtmlId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TemplateHtmlId");

                    b.ToTable("CourseCertification");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CourseMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("ValueTo")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseMarks");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CourseMarkTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseMarkId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CourseMarkId");

                    b.ToTable("CourseMarkTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CoursePackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CoursePackages");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CoursePackagesRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CoursePackagesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CoursePackagesId");

                    b.ToTable("CoursePackagesRelations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CoursePakagesTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoursePackagesId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CoursePackagesId");

                    b.ToTable("CoursePakagesTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CoursePrerequisite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PrerequisiteCourseId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("PrerequisiteCourseId");

                    b.ToTable("CoursePrerequisite");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CourseResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LectureId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LectureId");

                    b.ToTable("CourseResource");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CourseResourceTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CourseResourceId");

                    b.ToTable("CourseResourceTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CourseTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcquiredSkills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetGroup")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Icon")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsExchange")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CurrencyTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CurrencyTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.DataBaseScript", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DataBaseScripts");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.DetailsLookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("DetailsLookup");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.DetailsLookupTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DetailsLookupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("DetailsLookupId");

                    b.ToTable("DetailsLookupTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactType")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("CycleLink")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("cycleLink");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email1")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Email");

                    b.Property<string>("ImageLink")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<int?>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartWorkDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EmployeeTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnrollCourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EnrollCourseId");

                    b.ToTable("EnrollAssignment");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollAssignmentTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnrollAssignmentId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("EnrollAssignmentId");

                    b.ToTable("EnrollAssignmentTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseAllowUserRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("EnrollTeacherCourseId")
                        .HasColumnType("int");

                    b.Property<int?>("RateTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("EnrollTeacherCourseId");

                    b.ToTable("EnrollCourseAllowUserRates");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseAssigment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnrollTeacherCourseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PublishEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollTeacherCourseId");

                    b.ToTable("EnrollCourseAssigment");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseAssigmentQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EnrollCourseAssigmentId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollCourseAssigmentId");

                    b.ToTable("EnrollCourseAssigmentQuestion");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseAssigmentQuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("EnrollCourseAssigmentQuestionOption");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseAssigmentQuestionOptionTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("OptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.ToTable("EnrollCourseAssigmentQuestionOptionTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseAssigmentQuestionTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("EnrollCourseAssigmentQuestionTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseAssigmentTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EnrollCourseAssigmentId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("EnrollCourseAssigmentId");

                    b.ToTable("EnrollCourseAssigmentTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("EnrollLectureId")
                        .HasColumnType("int")
                        .HasColumnName("EnrollLectureID");

                    b.Property<int>("EnrollTeacherCourseId")
                        .HasColumnType("int");

                    b.Property<double?>("ExamFinalMark")
                        .HasColumnType("float");

                    b.Property<int?>("ExamTemplateId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsPrerequisite")
                        .HasColumnType("bit");

                    b.Property<bool?>("MarkAdoption")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PublishEndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Shuffle")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TestTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TestTypeID");

                    b.HasKey("Id");

                    b.HasIndex("EnrollLectureId");

                    b.HasIndex("EnrollTeacherCourseId");

                    b.HasIndex("ExamTemplateId");

                    b.ToTable("EnrollCourseExam");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseExamQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EnrollCourseExamId")
                        .HasColumnType("int");

                    b.Property<double?>("Mark")
                        .HasColumnType("float");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollCourseExamId");

                    b.HasIndex("QuestionId");

                    b.ToTable("EnrollCourseExamQuestion");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseExamTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EnrollCourseExamId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("EnrollCourseExamId");

                    b.ToTable("EnrollCourseExamTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseQuiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("EnrollTeacherCourseId")
                        .HasColumnType("int");

                    b.Property<int?>("LectureId")
                        .HasColumnType("int");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<bool?>("QuestionOne")
                        .HasColumnType("bit");

                    b.Property<bool?>("QuestionThree")
                        .HasColumnType("bit");

                    b.Property<bool?>("QuestionTwo")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollTeacherCourseId");

                    b.HasIndex("LectureId");

                    b.ToTable("EnrollCourseQuiz");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseQuizPointe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("EnrollCourseQuizId")
                        .HasColumnType("int");

                    b.Property<int?>("EnrollStudentCourseId")
                        .HasColumnType("int");

                    b.Property<decimal?>("QuestionOne")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("QuestionThree")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("QuestionTwo")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollCourseQuizId");

                    b.HasIndex("EnrollStudentCourseId");

                    b.ToTable("EnrollCourseQuizPointes");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnrollCourseId")
                        .HasColumnType("int");

                    b.Property<int>("EnrollLectureId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollCourseId");

                    b.HasIndex("EnrollLectureId");

                    b.ToTable("EnrollCourseResource");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseResourceTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnrollCourseResourceId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("EnrollCourseResourceId");

                    b.ToTable("EnrollCourseResourceTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("DayId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EnrollCourseId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("FromTime")
                        .HasColumnType("time");

                    b.Property<int?>("LearningMethodId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("ToTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("EnrollCourseId");

                    b.ToTable("EnrollCourseTime");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseTimeCustomization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<int>("DayId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EnrollCourseId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("FromTime")
                        .HasColumnType("time");

                    b.Property<int?>("LearningMethodId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("ToTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("EnrollCourseId");

                    b.ToTable("EnrollCourseTimeCustomization");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollLecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("EnrollCourseId")
                        .HasColumnType("int");

                    b.Property<int>("EnrollSectionId")
                        .HasColumnType("int");

                    b.Property<string>("LectureName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollCourseId");

                    b.HasIndex("EnrollSectionId");

                    b.ToTable("EnrollLecture");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollLectureTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("EnrollLectureId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LectureName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("EnrollLectureId");

                    b.ToTable("EnrollLectureTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollSectionOfCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("EnrollCourseId")
                        .HasColumnType("int");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollCourseId");

                    b.ToTable("EnrollSectionOfCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollSectionOfCourseTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("EnrollSectionId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("EnrollSectionId");

                    b.ToTable("EnrollSectionOfCourseTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlertTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("EnrollStudentCourseId")
                        .HasColumnType("int");

                    b.Property<int?>("EnrollTeacherCourseId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EnrollStudentCourseId");

                    b.HasIndex("EnrollTeacherCourseId");

                    b.ToTable("EnrollStudentAlert");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentAssigment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EnrollCourseAssigmentId")
                        .HasColumnType("int");

                    b.Property<int>("EnrollStudentCourseId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollCourseAssigmentId");

                    b.HasIndex("EnrollStudentCourseId");

                    b.ToTable("EnrollStudentAssigment");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentAssigmentAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EnrollCourseAssigmentQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("EnrollStudentAssigmentId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollCourseAssigmentQuestionId");

                    b.HasIndex("EnrollStudentAssigmentId");

                    b.ToTable("EnrollStudentAssigmentAnswer");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentAssigmentAnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EnrollStudentAssigmentAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("QusetionOptionId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollStudentAssigmentAnswerId");

                    b.ToTable("EnrollStudentAssigmentAnswerOption");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("CurrencyRate")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("CustomerCurrencyCode")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpelledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsPass")
                        .HasColumnType("bit");

                    b.Property<double?>("Mark")
                        .HasColumnType("float");

                    b.Property<bool?>("NeedApproval")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("EnrollStudentCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentCourseAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("EnrollStudentCourseId")
                        .HasColumnType("int");

                    b.Property<string>("FileAttached")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollStudentCourseId");

                    b.ToTable("EnrollStudentCourseAttachment");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EnrollCourseExamId")
                        .HasColumnType("int");

                    b.Property<int>("EnrollStudentCourseId")
                        .HasColumnType("int");

                    b.Property<double?>("FinalMark")
                        .HasColumnType("float");

                    b.Property<double?>("MarkAfterConversion")
                        .HasColumnType("float");

                    b.Property<double?>("MarkHeGot")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollCourseExamId");

                    b.HasIndex("EnrollStudentCourseId");

                    b.ToTable("EnrollStudentExam");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentExamAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EnrollCourseExamQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("EnrollStudentExamId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<double>("Mark")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollCourseExamQuestionId");

                    b.HasIndex("EnrollStudentExamId");

                    b.ToTable("EnrollStudentExamAnswer");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentExamAnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EnrollStudentExamAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("QusetionOptionId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollStudentExamAnswerId");

                    b.HasIndex("QusetionOptionId");

                    b.ToTable("EnrollStudentExamAnswerOption");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollTeacherCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgeAllowedForRegistration")
                        .HasColumnType("int");

                    b.Property<int>("AgeGroup")
                        .HasColumnType("int");

                    b.Property<int?>("AgeGroupTo")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("CalculationTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("CertificateAdoption")
                        .HasColumnType("bit");

                    b.Property<int?>("CountOfStudent")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsCourseDone")
                        .HasColumnType("bit");

                    b.Property<int?>("LearningMethodId")
                        .HasColumnType("int");

                    b.Property<string>("NotesForEnrolled")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PublicationEndDate")
                        .HasColumnType("date");

                    b.Property<string>("SectionName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("SemesterId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WorkEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("WorkStartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("TeacherId");

                    b.ToTable("EnrollTeacherCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollTeacherCourseTranlation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("EnrollCourseId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("NotesForEnrolled")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("EnrollCourseId");

                    b.ToTable("EnrollTeacherCourseTranlation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ExamQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("ExamQuestion");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ExamTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<double?>("FinalMark")
                        .HasColumnType("float");

                    b.Property<double?>("MarkAfterConversion")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("Shuffle")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CourseId");

                    b.ToTable("ExamTemplate");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ExamTemplateTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamTemplateTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Expulsion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpelledFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpelledTo")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpulsionEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpulsionStart")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Expulsion");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Generalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("GeneralizationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Generalization");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.GeneralizationEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("GeneralizationId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("GeneralizationId");

                    b.ToTable("GeneralizationEmployee");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.GeneralizationTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("GeneralizationId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("GeneralizationId");

                    b.ToTable("GeneralizationTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.InvoicesPay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("CurrencyRate")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("CustomerCurrencyCode")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EnrollTeacherCourseId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProcessStatus")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptNo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("EnrollTeacherCourseId");

                    b.ToTable("InvoicesPay");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ItemFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("ItemFile");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("LectureName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Lecture");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.LectureTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("LectureId")
                        .HasColumnType("int");

                    b.Property<string>("LectureName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("LectureId");

                    b.ToTable("LectureTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ManagementRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("EnrollTeacherCourseId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Percent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollTeacherCourseId");

                    b.ToTable("ManagementRate");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ManagementRateLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ManagementRateId")
                        .HasColumnType("int");

                    b.Property<int?>("StandardId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManagementRateId");

                    b.HasIndex("StandardId");

                    b.ToTable("ManagementRateLine");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ManagementStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Standard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ManagementStandard");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ManagementStandardTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("ManagementStandardId")
                        .HasColumnType("int");

                    b.Property<string>("Standard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManagementStandardId");

                    b.ToTable("ManagementStandardTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.MarkAdoptionForExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EnrollTeacherCourseId")
                        .HasColumnType("int");

                    b.Property<int?>("ExamTemplateId")
                        .HasColumnType("int");

                    b.Property<bool?>("Value")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EnrollTeacherCourseId");

                    b.HasIndex("ExamTemplateId");

                    b.ToTable("MarkAdoptionForExam");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.MarkAdoptionForPracticalExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EnrollTeacherCourseId")
                        .HasColumnType("int");

                    b.Property<int?>("PracticalExamId")
                        .HasColumnType("int");

                    b.Property<bool?>("Value")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EnrollTeacherCourseId");

                    b.HasIndex("PracticalExamId");

                    b.ToTable("MarkAdoptionForPracticalExam");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.MasterLookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MasterLookup");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.MasterLookupTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("MasterLookupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("MasterLookupId");

                    b.ToTable("MasterLookupTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ExtraMobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsExtraMobile")
                        .HasColumnType("bit");

                    b.Property<string>("Message1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Message");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Source")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("ToId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaseUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ModuleTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("GeneralizationId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("GeneralizationId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("PageName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("PageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermissionKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SuperAdminId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SuperAdminId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PermissionTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("PageName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("PermissionTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalEnrollmentExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EnrollTeacherCourseId")
                        .HasColumnType("int");

                    b.Property<bool?>("MarkAdoption")
                        .HasColumnType("bit");

                    b.Property<int?>("PracticalExamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollTeacherCourseId");

                    b.HasIndex("PracticalExamId");

                    b.ToTable("PracticalEnrollmentExam");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalEnrollmentExamStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("EnrollStudentCourseId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Mark")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("MarkAfterConversion")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("PracticalEnrollmentExamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollStudentCourseId");

                    b.HasIndex("PracticalEnrollmentExamId");

                    b.ToTable("PracticalEnrollmentExamStudent");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalEnrollmentExamStudentSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("DisountMarkTotal")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("Mark")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("PracticalEnrollmentExamStudentId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PracticalEnrollmentExamStudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("PracticalEnrollmentExamStudentSubject");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalEnrollmentExamStudentSubjectRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Mark")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("NoOfErrors")
                        .HasColumnType("int");

                    b.Property<int>("PracticalEnrollmentExamStudentSubjectId")
                        .HasColumnType("int");

                    b.Property<int>("PracticalQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PracticalEnrollmentExamStudentSubjectId");

                    b.HasIndex("PracticalQuestionId");

                    b.ToTable("PracticalEnrollmentExamStudentSubjectRating");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalEnrollmentExamTrainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("PracticalEnrollmentExamId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PracticalEnrollmentExamId");

                    b.HasIndex("TrainerId");

                    b.ToTable("PracticalEnrollmentExamTrainer");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Mark")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("MarkAfterConversion")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PracticalExam");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalExamCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PracticalExamId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectMark")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("PracticalExamId");

                    b.ToTable("PracticalExamCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalExamCourseSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("PracticalExamCourseId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PracticalExamCourseId");

                    b.HasIndex("SubjectId");

                    b.ToTable("PracticalExamCourseSubject");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalExamQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PracticalExamId")
                        .HasColumnType("int");

                    b.Property<int>("PracticalQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PracticalExamId");

                    b.HasIndex("PracticalQuestionId");

                    b.ToTable("PracticalExamQuestion");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalExamTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PracticalExamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PracticalExamId");

                    b.ToTable("PracticalExamTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool?>("IsDiscountFromTotal")
                        .HasColumnType("bit");

                    b.Property<bool?>("Main")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Mark")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PracticalQuestion");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalQuestionTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PracticalQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PracticalQuestionId");

                    b.ToTable("PracticalQuestionTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool?>("CertifiedBankQuestion")
                        .HasColumnType("bit");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("Mark")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.QuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOption");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.QuestionOptionTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("OptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.ToTable("QuestionOptionTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.QuestionTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SectionOfCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("SectionOfCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SectionOfCourseQuiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("LectureId")
                        .HasColumnType("int");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<bool?>("QuestionOne")
                        .HasColumnType("bit");

                    b.Property<bool?>("QuestionThree")
                        .HasColumnType("bit");

                    b.Property<bool?>("QuestionTwo")
                        .HasColumnType("bit");

                    b.Property<int?>("SectionOfCourseId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LectureId");

                    b.HasIndex("SectionOfCourseId");

                    b.ToTable("SectionOfCourseQuiz");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SectionOfCourseTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("SectionOfCourseTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Default")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PublicationEndDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WorkEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("WorkStartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Semester");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SemesterTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.ToTable("SemesterTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SenangPay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("CurrencyRate")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("CustomerCurrencyCode")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Details")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("EnrollTeacherCourseId")
                        .HasColumnType("int");

                    b.Property<string>("Msg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ProcessDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProjectCostId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SenangPayPaymentType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("EnrollTeacherCourseId");

                    b.HasIndex("ProjectCostId");

                    b.HasIndex("ProjectId");

                    b.ToTable("SenangPay");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Source", b =>
                {
                    b.Property<double?>("Birthday")
                        .HasColumnType("float");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("DateMonth")
                        .HasColumnType("float");

                    b.Property<double?>("DateYear")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("NewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NewID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Number")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("State")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("source");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BirthPlace")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CollegeId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EducationalLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExtraMobile")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsExternalStudy")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFastSubscription")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMedicalPast")
                        .HasColumnType("bit");

                    b.Property<string>("MedicalDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingConsultantId")
                        .HasColumnType("int");

                    b.Property<string>("Work")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("WorkPlace")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.StudentAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AbsenceNote")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("EnrollTeacherCourseId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollTeacherCourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAttendance");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.StudentBalanceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("EnrollStudentCourseId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EnrollStudentCourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentBalanceHistory");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.StudentExpulsionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("EnrollStudentCourseId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollStudentCourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentExpulsionHistory");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.StudentNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentNotes");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.StudentNotesTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("StudentNoteId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("StudentNoteId");

                    b.ToTable("StudentNotesTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.StudentSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<double?>("CurrencyRate")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EnrollTeacherCourseId")
                        .HasColumnType("int");

                    b.Property<decimal?>("FinalPrice")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("PaymentWayId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubscriptionDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EnrollTeacherCourseId");

                    b.ToTable("StudentSubscription");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.StudentTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BirthPlace")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Work")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("WorkPlace")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SubCommunicationChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommunicationChannelId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommunicationChannelId");

                    b.HasIndex("ParentId");

                    b.ToTable("SubCommunicationChannel");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SubCommunicationChannelTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SubCommunicationChannelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubCommunicationChannelId");

                    b.ToTable("SubCommunicationChannelTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ExamTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SubjectTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Subscriber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Subscribers");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SuperAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Show")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("SuperAdmin");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SuperAdminSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ImageUrlAr")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("NameArabic")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("NameEnglish")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("SecondarySiteColor")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SiteColor")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("SuperAdminSettings");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SystemFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SystemFile");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SystemFileTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("SystemFileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SystemFileId");

                    b.ToTable("SystemFileTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SystemGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SystemGroup");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SystemGroupTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SystemGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SystemGroupId");

                    b.ToTable("SystemGroupTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SystemGroupUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SystemGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SystemGroupId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("SystemGroupUsers");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SystemLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SystemLog");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SystemSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SuperAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("SuperAdminId");

                    b.ToTable("SystemSetting");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SystemSettingTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SettingId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SettingId");

                    b.ToTable("SystemSettingTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.TeacherAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Attended")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("EnrollTeacherCourseId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("EnrollTeacherCourseId");

                    b.ToTable("TeacherAttendances");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.TempTable1", b =>
                {
                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Month")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rownum")
                        .HasColumnType("int")
                        .HasColumnName("rownum");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Temp_Table1");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.TemplateHtml", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RanderHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("TemplateHtml");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Trainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GeneralSpecialtyId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool?>("IsFullTimeWorker")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUser")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShowInPages")
                        .HasColumnType("bit");

                    b.Property<string>("Signature")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime>("StartWorkDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkHouers")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Trainer");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.TrainerRateMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("FromRange")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("Measure")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("ToRange")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TrainerRateMeasure");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.TrainerRateMeasureTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Measure")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TrainerRateMeasureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainerRateMeasureId");

                    b.ToTable("TrainerRateMeasureTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.TrainerTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("EmployeeColorId")
                        .HasColumnType("int");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime");

                    b.Property<int?>("PreferedLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartWorkDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.UserProfileTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserProfileTranslation");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AboutDicTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.AboutDic", "AboutDic")
                        .WithMany("AboutDicTranslations")
                        .HasForeignKey("AboutDicId")
                        .HasConstraintName("FK_AboutDicTranslation_AboutDicTranslation")
                        .IsRequired();

                    b.Navigation("AboutDic");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AcademicSupervisionRate", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollTeacherCourse")
                        .WithMany("AcademicSupervisionRates")
                        .HasForeignKey("EnrollTeacherCourseId")
                        .HasConstraintName("FK_AcademicSupervisionRate_EnrollTeacherCourse");

                    b.HasOne("DataEntity.Models.EfModels.AcademicSupervisionStandard", "Standard")
                        .WithMany("AcademicSupervisionRates")
                        .HasForeignKey("StandardId")
                        .HasConstraintName("FK_AcademicSupervisionRate_AcademicSupervisionStandard");

                    b.Navigation("EnrollTeacherCourse");

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AcademicSupervisionStandardTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.AcademicSupervisionStandard", "AcademicSupervisionStandard")
                        .WithMany("AcademicSupervisionStandardTranslations")
                        .HasForeignKey("AcademicSupervisionStandardId")
                        .HasConstraintName("FK_AcademicSupervisionStandardTranslation_AcademicSupervisionStandard")
                        .IsRequired();

                    b.Navigation("AcademicSupervisionStandard");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AspNetRoleClaim", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AspNetUserClaim", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AspNetUserLogin", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AspNetUserRole", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.AspNetRole", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.AspNetUser", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AspNetUserToken", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Assignment", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Assignment_Course")
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AssignmentTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Assignment", "Assignment")
                        .WithMany("AssignmentTranslations")
                        .HasForeignKey("AssignmentId")
                        .HasConstraintName("FK_AssignmentTranslation_Assignment")
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Attendance", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Contact", "Contact")
                        .WithMany("Attendances")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_Attendance_Contact")
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.BranchTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Branch", "Branch")
                        .WithMany("BranchTranslations")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_BranchTranslation_Branch")
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CalendarTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Calendar", "Calendar")
                        .WithMany("CalendarTranslations")
                        .HasForeignKey("CalendarId")
                        .HasConstraintName("FK_CalendarTranslation_Calendar")
                        .IsRequired();

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CertificateAdoption", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Course", "Course")
                        .WithMany("CertificateAdoptions")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_CertificateAdoption_Course");

                    b.HasOne("DataEntity.Models.EfModels.Semester", "Semester")
                        .WithMany("CertificateAdoptions")
                        .HasForeignKey("SemesterId")
                        .HasConstraintName("FK_CertificateAdoption_Semester");

                    b.Navigation("Course");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.City", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_City_Country")
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CityTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.City", "City")
                        .WithMany("CityTranslations")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_CityTranslation_City")
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsCatery", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CmsCatery", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_CmsCatery_CmsCatery");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsCateryTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CmsCatery", "Catery")
                        .WithMany("CmsCateryTranslations")
                        .HasForeignKey("CateryId")
                        .HasConstraintName("FK_CmsCateryTranslation_CmsCatery")
                        .IsRequired();

                    b.Navigation("Catery");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsPage", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CmsCatery", "Catery")
                        .WithMany("CmsPages")
                        .HasForeignKey("CateryId")
                        .HasConstraintName("FK_CmsPage_CmsCatery");

                    b.Navigation("Catery");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsPageTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CmsPage", "Page")
                        .WithMany("CmsPageTranslations")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_CmsPageTranslation_CmsPage")
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsProject", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CmsProjectCategory", "ProjectCategory")
                        .WithMany("CmsProjects")
                        .HasForeignKey("ProjectCategoryId")
                        .HasConstraintName("FK_CmsProject_CmsProjectCategory");

                    b.Navigation("ProjectCategory");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsProjectCategoryTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CmsProjectCategory", "ProjectCategory")
                        .WithMany("CmsProjectCategoryTranslations")
                        .HasForeignKey("ProjectCategoryId")
                        .HasConstraintName("FK_CmsProjectCategoryTranslation_CmsProjectCategory")
                        .IsRequired();

                    b.Navigation("ProjectCategory");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsProjectCost", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CmsProject", "Project")
                        .WithMany("CmsProjectCosts")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_CmsProjectCost_CmsProject");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsProjectCostTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CmsProjectCost", "ProjectCost")
                        .WithMany("CmsProjectCostTranslations")
                        .HasForeignKey("ProjectCostId")
                        .HasConstraintName("FK_CmsProjectCostTranslation_CmsProjectCost")
                        .IsRequired();

                    b.Navigation("ProjectCost");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsProjectDonor", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CmsProjectCost", "ProjectCost")
                        .WithMany("CmsProjectDonors")
                        .HasForeignKey("ProjectCostId")
                        .HasConstraintName("FK_CmsProjectDonor_CmsProjectCost");

                    b.HasOne("DataEntity.Models.EfModels.CmsProject", "Project")
                        .WithMany("CmsProjectDonors")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_CmsProjectDonor_CmsProject");

                    b.Navigation("Project");

                    b.Navigation("ProjectCost");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsProjectResource", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CmsProject", "Project")
                        .WithMany("CmsProjectResources")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_CmsProjectResource_CmsProject");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsProjectTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CmsProject", "Project")
                        .WithMany("CmsProjectTranslations")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_CmsProjectTranslation_CmsProject")
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsSliderTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CmsSlider", "Slider")
                        .WithMany("CmsSliderTranslations")
                        .HasForeignKey("SliderId")
                        .HasConstraintName("FK_CmsSliderTranslation_CmsSlider")
                        .IsRequired();

                    b.Navigation("Slider");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsWhatPeopleSayTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CmsWhatPeopleSay", "People")
                        .WithMany("CmsWhatPeopleSayTranslations")
                        .HasForeignKey("PeopleId")
                        .HasConstraintName("FK_CmsWhatPeopleSayTranslation_CmsWhatPeopleSay")
                        .IsRequired();

                    b.Navigation("People");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CommunicationChannelTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CommunicationChannel", "CommunicationChannel")
                        .WithMany("CommunicationChannelTranslations")
                        .HasForeignKey("CommunicationChannelId")
                        .HasConstraintName("FK_CommunicationChannelTranslation_CommunicationChannel")
                        .IsRequired();

                    b.Navigation("CommunicationChannel");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CommunicationLog", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Contact", "Contact")
                        .WithMany("CommunicationLogs")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_CommunicationLogs_Contact")
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Contact", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Branch", "Branch")
                        .WithMany("Contacts")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_Contact_Branch");

                    b.HasOne("DataEntity.Models.EfModels.City", "City")
                        .WithMany("Contacts")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Contact_City");

                    b.HasOne("DataEntity.Models.EfModels.Country", "Country")
                        .WithMany("Contacts")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Contact_Country");

                    b.Navigation("Branch");

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ContactTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Contact", "Contact")
                        .WithMany("ContactTranslations")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_ContactTranslation_Contact")
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ContactType", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Contact", "Contact")
                        .WithMany("ContactTypes")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_ContactType_Contact")
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CountryTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Country", "Country")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_CountryTranslation_Country")
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Course", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CourseCategory", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Course_CourseCategory");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CourseAttendance", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollStudentCourse", "EnrollStudentCourse")
                        .WithMany("CourseAttendances")
                        .HasForeignKey("EnrollStudentCourseId")
                        .HasConstraintName("FK_CourseAttendance_EnrollStudentCourse");

                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollTeacherCourse")
                        .WithMany("CourseAttendances")
                        .HasForeignKey("EnrollTeacherCourseId")
                        .HasConstraintName("FK_CourseAttendance_EnrollTeacherCourse");

                    b.Navigation("EnrollStudentCourse");

                    b.Navigation("EnrollTeacherCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CourseCategory", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CourseCategory", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_CourseCategory_CourseCategory");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CourseCategoryTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CourseCategory", "Category")
                        .WithMany("CourseCategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_CourseCategoryTranslation_CourseCategory")
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CourseCertification", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Course", "Course")
                        .WithMany("CourseCertifications")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_CourseCertification_Course")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.TemplateHtml", "TemplateHtml")
                        .WithMany("CourseCertifications")
                        .HasForeignKey("TemplateHtmlId")
                        .HasConstraintName("FK_CourseCertification_TemplateHtml")
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("TemplateHtml");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CourseMark", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Course", "Course")
                        .WithMany("CourseMarks")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_CourseMarks_Course");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CourseMarkTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CourseMark", "CourseMark")
                        .WithMany("CourseMarkTranslations")
                        .HasForeignKey("CourseMarkId")
                        .HasConstraintName("FK_CourseMarkTranslation_CourseMarks");

                    b.Navigation("CourseMark");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CoursePackagesRelation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "Course")
                        .WithMany("CoursePackagesRelations")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_CoursePackagesRelations_Course")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.CoursePackage", "CoursePackages")
                        .WithMany("CoursePackagesRelations")
                        .HasForeignKey("CoursePackagesId")
                        .HasConstraintName("FK_CoursePackagesRelations_CoursePackages")
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CoursePackages");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CoursePakagesTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CoursePackage", "CoursePackages")
                        .WithMany("CoursePakagesTranslations")
                        .HasForeignKey("CoursePackagesId")
                        .HasConstraintName("FK_CoursePakagesTranslation_CoursePackages")
                        .IsRequired();

                    b.Navigation("CoursePackages");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CoursePrerequisite", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Course", "Course")
                        .WithMany("CoursePrerequisiteCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_PrerequisiteCourse_Course")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.Course", "PrerequisiteCourse")
                        .WithMany("CoursePrerequisitePrerequisiteCourses")
                        .HasForeignKey("PrerequisiteCourseId")
                        .HasConstraintName("FK_PrerequisiteCourse_Course1")
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("PrerequisiteCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CourseResource", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Course", "Course")
                        .WithMany("CourseResources")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_CourseResource_Course")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.Lecture", "Lecture")
                        .WithMany("CourseResources")
                        .HasForeignKey("LectureId")
                        .HasConstraintName("FK_CourseResource_Lecture")
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CourseResourceTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CourseResource", "CourseResource")
                        .WithMany("CourseResourceTranslations")
                        .HasForeignKey("CourseResourceId")
                        .HasConstraintName("FK_CourseResourceTranslation_CourseResource")
                        .IsRequired();

                    b.Navigation("CourseResource");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CourseTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Course", "Course")
                        .WithMany("CourseTranslations")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_CourseTranslation_Course")
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CurrencyTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Currency", "Currency")
                        .WithMany("CurrencyTranslations")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_CurrencyTranslation_Currency")
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.DetailsLookup", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.MasterLookup", "Master")
                        .WithMany("DetailsLookups")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("FK_DetailsLookup_MasterLookup")
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.DetailsLookupTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.DetailsLookup", "DetailsLookup")
                        .WithMany("DetailsLookupTranslations")
                        .HasForeignKey("DetailsLookupId")
                        .HasConstraintName("FK_DetailsLookupTranslation_DetailsLookup")
                        .IsRequired();

                    b.Navigation("DetailsLookup");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Email", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Contact", "Contact")
                        .WithMany("Emails")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_Email_Contact")
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Employee", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Contact", "Contact")
                        .WithMany("Employees")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_Employee_Contact")
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EmployeeTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Employee", "Employee")
                        .WithMany("EmployeeTranslations")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeTranslation_Employee")
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollAssignment", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollCourse")
                        .WithMany("EnrollAssignments")
                        .HasForeignKey("EnrollCourseId")
                        .HasConstraintName("FK_EnrollAssignment_EnrollCourseExam")
                        .IsRequired();

                    b.Navigation("EnrollCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollAssignmentTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollAssignment", "EnrollAssignment")
                        .WithMany("EnrollAssignmentTranslations")
                        .HasForeignKey("EnrollAssignmentId")
                        .HasConstraintName("FK_EnrollAssignmentTranslation_EnrollAssignment")
                        .IsRequired();

                    b.Navigation("EnrollAssignment");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseAllowUserRate", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Contact", "Contact")
                        .WithMany("EnrollCourseAllowUserRates")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_EnrollCourseAllowUserRates_Contact")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollTeacherCourse")
                        .WithMany("EnrollCourseAllowUserRates")
                        .HasForeignKey("EnrollTeacherCourseId")
                        .HasConstraintName("FK_EnrollCourseAllowUserRates_EnrollTeacherCourse");

                    b.Navigation("Contact");

                    b.Navigation("EnrollTeacherCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseAssigment", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollTeacherCourse")
                        .WithMany("EnrollCourseAssigments")
                        .HasForeignKey("EnrollTeacherCourseId")
                        .HasConstraintName("FK_EnrollCourseAssigment_EnrollTeacherCourse")
                        .IsRequired();

                    b.Navigation("EnrollTeacherCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseAssigmentQuestion", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollCourseAssigment", "EnrollCourseAssigment")
                        .WithMany("EnrollCourseAssigmentQuestions")
                        .HasForeignKey("EnrollCourseAssigmentId")
                        .HasConstraintName("FK_EnrollCourseAssigmentQuestion_EnrollCourseAssigment")
                        .IsRequired();

                    b.Navigation("EnrollCourseAssigment");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseAssigmentQuestionOption", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollCourseAssigmentQuestion", "Question")
                        .WithMany("EnrollCourseAssigmentQuestionOptions")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_EnrollCourseAssigmentQuestionOption_EnrollCourseAssigmentQuestion");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseAssigmentQuestionOptionTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollCourseAssigmentQuestionOption", "Option")
                        .WithMany("EnrollCourseAssigmentQuestionOptionTranslations")
                        .HasForeignKey("OptionId")
                        .HasConstraintName("FK_EnrollCourseAssigmentQuestionOptionTranslation_EnrollCourseAssigmentQuestionOption");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseAssigmentQuestionTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollCourseAssigmentQuestion", "Question")
                        .WithMany("EnrollCourseAssigmentQuestionTranslations")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_EnrollCourseAssigmentQuestionTranslation_EnrollCourseAssigmentQuestion")
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseAssigmentTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollCourseAssigment", "EnrollCourseAssigment")
                        .WithMany("EnrollCourseAssigmentTranslations")
                        .HasForeignKey("EnrollCourseAssigmentId")
                        .HasConstraintName("FK_EnrollCourseAssigmentTranslation_EnrollCourseAssigment")
                        .IsRequired();

                    b.Navigation("EnrollCourseAssigment");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseExam", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollLecture", "EnrollLecture")
                        .WithMany("EnrollCourseExams")
                        .HasForeignKey("EnrollLectureId")
                        .HasConstraintName("FK_EnrollCourseExam_EnrollLecture");

                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollTeacherCourse")
                        .WithMany("EnrollCourseExams")
                        .HasForeignKey("EnrollTeacherCourseId")
                        .HasConstraintName("FK_EnrollCourseExam_EnrollTeacherCourse")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.ExamTemplate", "ExamTemplate")
                        .WithMany("EnrollCourseExams")
                        .HasForeignKey("ExamTemplateId")
                        .HasConstraintName("FK_EnrollCourseExam_ExamTemplate");

                    b.Navigation("EnrollLecture");

                    b.Navigation("EnrollTeacherCourse");

                    b.Navigation("ExamTemplate");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseExamQuestion", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollCourseExam", "EnrollCourseExam")
                        .WithMany("EnrollCourseExamQuestions")
                        .HasForeignKey("EnrollCourseExamId")
                        .HasConstraintName("FK_EnrollCourseExamQuestion_EnrollCourseExam")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.ExamQuestion", "Question")
                        .WithMany("EnrollCourseExamQuestions")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_EnrollCourseExamQuestion_ExamQuestion")
                        .IsRequired();

                    b.Navigation("EnrollCourseExam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseExamTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollCourseExam", "EnrollCourseExam")
                        .WithMany("EnrollCourseExamTranslations")
                        .HasForeignKey("EnrollCourseExamId")
                        .HasConstraintName("FK_EnrollCourseExamTranslation_EnrollCourseExam")
                        .IsRequired();

                    b.Navigation("EnrollCourseExam");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseQuiz", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollTeacherCourse")
                        .WithMany("EnrollCourseQuizzes")
                        .HasForeignKey("EnrollTeacherCourseId")
                        .HasConstraintName("FK_EnrollCourseQuiz_EnrollTeacherCourse");

                    b.HasOne("DataEntity.Models.EfModels.Lecture", "Lecture")
                        .WithMany("EnrollCourseQuizzes")
                        .HasForeignKey("LectureId")
                        .HasConstraintName("FK_EnrollCourseQuiz_Lecture");

                    b.Navigation("EnrollTeacherCourse");

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseQuizPointe", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollCourseQuiz", "EnrollCourseQuiz")
                        .WithMany("EnrollCourseQuizPointes")
                        .HasForeignKey("EnrollCourseQuizId")
                        .HasConstraintName("FK_EnrollCourseQuizPointes_EnrollCourseQuiz");

                    b.HasOne("DataEntity.Models.EfModels.EnrollStudentCourse", "EnrollStudentCourse")
                        .WithMany("EnrollCourseQuizPointes")
                        .HasForeignKey("EnrollStudentCourseId")
                        .HasConstraintName("FK_EnrollCourseQuizPointes_EnrollStudentCourse");

                    b.Navigation("EnrollCourseQuiz");

                    b.Navigation("EnrollStudentCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseResource", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollCourse")
                        .WithMany("EnrollCourseResources")
                        .HasForeignKey("EnrollCourseId")
                        .HasConstraintName("FK_EnrollCourseResource_EnrollTeacherCourse")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.EnrollLecture", "EnrollLecture")
                        .WithMany("EnrollCourseResources")
                        .HasForeignKey("EnrollLectureId")
                        .HasConstraintName("FK_EnrollCourseResource_EnrollLecture")
                        .IsRequired();

                    b.Navigation("EnrollCourse");

                    b.Navigation("EnrollLecture");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseResourceTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollCourseResource", "EnrollCourseResource")
                        .WithMany("EnrollCourseResourceTranslations")
                        .HasForeignKey("EnrollCourseResourceId")
                        .HasConstraintName("FK_EnrollCourseResourceTranslation_EnrollCourseResource")
                        .IsRequired();

                    b.Navigation("EnrollCourseResource");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseTime", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollCourse")
                        .WithMany("EnrollCourseTimes")
                        .HasForeignKey("EnrollCourseId")
                        .HasConstraintName("FK_EnrollCourseTime_EnrollTeacherCourse")
                        .IsRequired();

                    b.Navigation("EnrollCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseTimeCustomization", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollCourse")
                        .WithMany("EnrollCourseTimeCustomizations")
                        .HasForeignKey("EnrollCourseId")
                        .HasConstraintName("FK_EnrollCourseTimeCustomization_EnrollTeacherCourse")
                        .IsRequired();

                    b.Navigation("EnrollCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollLecture", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollCourse")
                        .WithMany("EnrollLectures")
                        .HasForeignKey("EnrollCourseId")
                        .HasConstraintName("FK_EnrollLecture_EnrollTeacherCourse")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.EnrollSectionOfCourse", "EnrollSection")
                        .WithMany("EnrollLectures")
                        .HasForeignKey("EnrollSectionId")
                        .HasConstraintName("FK_EnrollLecture_EnrollSectionOfCourse")
                        .IsRequired();

                    b.Navigation("EnrollCourse");

                    b.Navigation("EnrollSection");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollLectureTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollLecture", "EnrollLecture")
                        .WithMany("EnrollLectureTranslations")
                        .HasForeignKey("EnrollLectureId")
                        .HasConstraintName("FK_EnrollLectureTranslation_EnrollLecture")
                        .IsRequired();

                    b.Navigation("EnrollLecture");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollSectionOfCourse", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollCourse")
                        .WithMany("EnrollSectionOfCourses")
                        .HasForeignKey("EnrollCourseId")
                        .HasConstraintName("FK_EnrollSectionOfCourse_EnrollTeacherCourse")
                        .IsRequired();

                    b.Navigation("EnrollCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollSectionOfCourseTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollSectionOfCourse", "EnrollSection")
                        .WithMany("EnrollSectionOfCourseTranslations")
                        .HasForeignKey("EnrollSectionId")
                        .HasConstraintName("FK_EnrollSectionOfCourseTranslation_EnrollSectionOfCourse")
                        .IsRequired();

                    b.Navigation("EnrollSection");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentAlert", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollStudentCourse", "EnrollStudentCourse")
                        .WithMany("EnrollStudentAlerts")
                        .HasForeignKey("EnrollStudentCourseId")
                        .HasConstraintName("FK_EnrollStudentAlert_EnrollStudentCourse");

                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollTeacherCourse")
                        .WithMany("EnrollStudentAlerts")
                        .HasForeignKey("EnrollTeacherCourseId")
                        .HasConstraintName("FK_EnrollStudentAlert_EnrollTeacherCourse");

                    b.Navigation("EnrollStudentCourse");

                    b.Navigation("EnrollTeacherCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentAssigment", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollCourseAssigment", "EnrollCourseAssigment")
                        .WithMany("EnrollStudentAssigments")
                        .HasForeignKey("EnrollCourseAssigmentId")
                        .HasConstraintName("FK_EnrollStudentAssigment_EnrollCourseAssigment")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.EnrollStudentCourse", "EnrollStudentCourse")
                        .WithMany("EnrollStudentAssigments")
                        .HasForeignKey("EnrollStudentCourseId")
                        .HasConstraintName("FK_EnrollStudentAssigment_EnrollStudentCourse")
                        .IsRequired();

                    b.Navigation("EnrollCourseAssigment");

                    b.Navigation("EnrollStudentCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentAssigmentAnswer", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollCourseAssigmentQuestion", "EnrollCourseAssigmentQuestion")
                        .WithMany("EnrollStudentAssigmentAnswers")
                        .HasForeignKey("EnrollCourseAssigmentQuestionId")
                        .HasConstraintName("FK_EnrollStudentAssigmentAnswer_EnrollCourseAssigmentQuestion")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.EnrollStudentAssigment", "EnrollStudentAssigment")
                        .WithMany("EnrollStudentAssigmentAnswers")
                        .HasForeignKey("EnrollStudentAssigmentId")
                        .HasConstraintName("FK_EnrollStudentAssigmentAnswer_EnrollStudentAssigment")
                        .IsRequired();

                    b.Navigation("EnrollCourseAssigmentQuestion");

                    b.Navigation("EnrollStudentAssigment");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentAssigmentAnswerOption", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollStudentAssigmentAnswer", "EnrollStudentAssigmentAnswer")
                        .WithMany("EnrollStudentAssigmentAnswerOptions")
                        .HasForeignKey("EnrollStudentAssigmentAnswerId")
                        .HasConstraintName("FK_EnrollStudentAssigmentAnswerOption_EnrollStudentAssigmentAnswer")
                        .IsRequired();

                    b.Navigation("EnrollStudentAssigmentAnswer");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentCourse", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "Course")
                        .WithMany("EnrollStudentCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_EnrollStudentCourse_EnrollTeacherCourse")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.Student", "Student")
                        .WithMany("EnrollStudentCourses")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_EnrollStudentCourse_Student")
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentCourseAttachment", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollStudentCourse", "EnrollStudentCourse")
                        .WithMany("EnrollStudentCourseAttachments")
                        .HasForeignKey("EnrollStudentCourseId")
                        .HasConstraintName("FK_EnrollStudentCourseAttachment_EnrollStudentCourse");

                    b.Navigation("EnrollStudentCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentExam", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollCourseExam", "EnrollCourseExam")
                        .WithMany("EnrollStudentExams")
                        .HasForeignKey("EnrollCourseExamId")
                        .HasConstraintName("FK_EnrollStudentExam_EnrollCourseExam")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.EnrollStudentCourse", "EnrollStudentCourse")
                        .WithMany("EnrollStudentExams")
                        .HasForeignKey("EnrollStudentCourseId")
                        .HasConstraintName("FK_EnrollStudentExam_Student")
                        .IsRequired();

                    b.Navigation("EnrollCourseExam");

                    b.Navigation("EnrollStudentCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentExamAnswer", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollCourseExamQuestion", "EnrollCourseExamQuestion")
                        .WithMany("EnrollStudentExamAnswers")
                        .HasForeignKey("EnrollCourseExamQuestionId")
                        .HasConstraintName("FK_EnrollStudentExamQuestion_ExamQuestion")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.EnrollStudentExam", "EnrollStudentExam")
                        .WithMany("EnrollStudentExamAnswers")
                        .HasForeignKey("EnrollStudentExamId")
                        .HasConstraintName("FK_EnrollStudentExamQuestion_EnrollStudentExam")
                        .IsRequired();

                    b.Navigation("EnrollCourseExamQuestion");

                    b.Navigation("EnrollStudentExam");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentExamAnswerOption", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollStudentExamAnswer", "EnrollStudentExamAnswer")
                        .WithMany("EnrollStudentExamAnswerOptions")
                        .HasForeignKey("EnrollStudentExamAnswerId")
                        .HasConstraintName("FK_EnrollStudentExamAnswerOption_EnrollStudentExamQuestion")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.QuestionOption", "QusetionOption")
                        .WithMany("EnrollStudentExamAnswerOptions")
                        .HasForeignKey("QusetionOptionId")
                        .HasConstraintName("FK_EnrollStudentExamAnswerOption_QuestionOption")
                        .IsRequired();

                    b.Navigation("EnrollStudentExamAnswer");

                    b.Navigation("QusetionOption");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollTeacherCourse", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Course", "Course")
                        .WithMany("EnrollTeacherCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_EnrollTeacherCourse_Course")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.Semester", "Semester")
                        .WithMany("EnrollTeacherCourses")
                        .HasForeignKey("SemesterId")
                        .HasConstraintName("FK_EnrollTeacherCourse_Semester");

                    b.HasOne("DataEntity.Models.EfModels.Trainer", "Teacher")
                        .WithMany("EnrollTeacherCourses")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_EnrollTeacherCourse_Trainer")
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Semester");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollTeacherCourseTranlation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollCourse")
                        .WithMany("EnrollTeacherCourseTranlations")
                        .HasForeignKey("EnrollCourseId")
                        .HasConstraintName("FK_EnrollTeacherCourseTranlation_EnrollTeacherCourse")
                        .IsRequired();

                    b.Navigation("EnrollCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ExamQuestion", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Question", "Question")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_ExamQuestion_Question")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.ExamTemplate", "Template")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("TemplateId")
                        .HasConstraintName("FK_ExamQuestion_ExamTemplate");

                    b.Navigation("Question");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ExamTemplate", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CourseCategory", "Category")
                        .WithMany("ExamTemplates")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_ExamTemplate_CourseCategory");

                    b.HasOne("DataEntity.Models.EfModels.Course", "Course")
                        .WithMany("ExamTemplates")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_ExamTemplate_Course");

                    b.Navigation("Category");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ExamTemplateTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.ExamTemplate", "Exam")
                        .WithMany("ExamTemplateTranslations")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK_ExamTemplateTranslation_ExamTemplate")
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Generalization", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Branch", "Branch")
                        .WithMany("Generalizations")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_Generalization_Branch");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.GeneralizationEmployee", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Contact", "Contact")
                        .WithMany("GeneralizationEmployees")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_GeneralizationEmployee_Contact");

                    b.HasOne("DataEntity.Models.EfModels.Generalization", "Generalization")
                        .WithMany("GeneralizationEmployees")
                        .HasForeignKey("GeneralizationId")
                        .HasConstraintName("FK_GeneralizationEmployee_Generalization");

                    b.Navigation("Contact");

                    b.Navigation("Generalization");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.GeneralizationTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Generalization", "Generalization")
                        .WithMany("GeneralizationTranslations")
                        .HasForeignKey("GeneralizationId")
                        .HasConstraintName("FK_GeneralizationTranslation_Generalization")
                        .IsRequired();

                    b.Navigation("Generalization");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.InvoicesPay", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Contact", "Contact")
                        .WithMany("InvoicesPays")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_InvoicesPay_Contact")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollTeacherCourse")
                        .WithMany("InvoicesPays")
                        .HasForeignKey("EnrollTeacherCourseId")
                        .HasConstraintName("FK_InvoicesPay_EnrollTeacherCourse")
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("EnrollTeacherCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ItemFile", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.SystemFile", "File")
                        .WithMany("ItemFiles")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_ItemFile_SystemFile")
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Lecture", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.SectionOfCourse", "Section")
                        .WithMany("Lectures")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK_Lecture_SectionOfCourse")
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.LectureTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Lecture", "Lecture")
                        .WithMany("LectureTranslations")
                        .HasForeignKey("LectureId")
                        .HasConstraintName("FK_LectureTranslation_Lecture")
                        .IsRequired();

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ManagementRate", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollTeacherCourse")
                        .WithMany("ManagementRates")
                        .HasForeignKey("EnrollTeacherCourseId")
                        .HasConstraintName("FK_ManagementRate_EnrollTeacherCourse");

                    b.Navigation("EnrollTeacherCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ManagementRateLine", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.ManagementRate", "ManagementRate")
                        .WithMany("ManagementRateLines")
                        .HasForeignKey("ManagementRateId")
                        .HasConstraintName("FK_ManagementRateLine_ManagementRate");

                    b.HasOne("DataEntity.Models.EfModels.ManagementStandard", "Standard")
                        .WithMany("ManagementRateLines")
                        .HasForeignKey("StandardId")
                        .HasConstraintName("FK_ManagementRateLine_Standard");

                    b.Navigation("ManagementRate");

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ManagementStandardTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.ManagementStandard", "ManagementStandard")
                        .WithMany("ManagementStandardTranslations")
                        .HasForeignKey("ManagementStandardId")
                        .HasConstraintName("FK_ManagementStandardTranslation_ManagementStandard")
                        .IsRequired();

                    b.Navigation("ManagementStandard");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.MarkAdoptionForExam", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollTeacherCourse")
                        .WithMany("MarkAdoptionForExams")
                        .HasForeignKey("EnrollTeacherCourseId")
                        .HasConstraintName("FK_MarkAdoptionForExam_EnrollTeacherCourse");

                    b.HasOne("DataEntity.Models.EfModels.ExamTemplate", "ExamTemplate")
                        .WithMany("MarkAdoptionForExams")
                        .HasForeignKey("ExamTemplateId")
                        .HasConstraintName("FK_MarkAdoptionForExam_ExamTemplate");

                    b.Navigation("EnrollTeacherCourse");

                    b.Navigation("ExamTemplate");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.MarkAdoptionForPracticalExam", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollTeacherCourse")
                        .WithMany("MarkAdoptionForPracticalExams")
                        .HasForeignKey("EnrollTeacherCourseId")
                        .HasConstraintName("FK_MarkAdoptionForPracticalExam_EnrollTeacherCourse");

                    b.HasOne("DataEntity.Models.EfModels.PracticalExam", "PracticalExam")
                        .WithMany("MarkAdoptionForPracticalExams")
                        .HasForeignKey("PracticalExamId")
                        .HasConstraintName("FK_MarkAdoptionForPracticalExam_PracticalExam");

                    b.Navigation("EnrollTeacherCourse");

                    b.Navigation("PracticalExam");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.MasterLookupTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.MasterLookup", "MasterLookup")
                        .WithMany("MasterLookupTranslations")
                        .HasForeignKey("MasterLookupId")
                        .HasConstraintName("FK_MasterLookupTranslation_MasterLookup")
                        .IsRequired();

                    b.Navigation("MasterLookup");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Message", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Branch", "Branch")
                        .WithMany("Messages")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_Messages_Branch");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ModuleTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Module", "Module")
                        .WithMany("ModuleTranslations")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK_ModuleTranslation_Modules")
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Notification", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Contact", "Contact")
                        .WithMany("Notifications")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_Notification_Contact");

                    b.HasOne("DataEntity.Models.EfModels.Generalization", "Generalization")
                        .WithMany("Notifications")
                        .HasForeignKey("GeneralizationId")
                        .HasConstraintName("FK_Notification_Generalization")
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Generalization");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Permission", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Module", "Module")
                        .WithMany("Permissions")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK_Permission_Modules");

                    b.HasOne("DataEntity.Models.EfModels.SuperAdmin", "SuperAdmin")
                        .WithMany("Permissions")
                        .HasForeignKey("SuperAdminId")
                        .HasConstraintName("FK_Permission_SuperAdmin");

                    b.Navigation("Module");

                    b.Navigation("SuperAdmin");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PermissionTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Permission", "Permission")
                        .WithMany("PermissionTranslations")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_PermissionTranslation_Permission")
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalEnrollmentExam", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollTeacherCourse")
                        .WithMany("PracticalEnrollmentExams")
                        .HasForeignKey("EnrollTeacherCourseId")
                        .HasConstraintName("FK_PracticalEnrollmentExam_EnrollTeacherCourse");

                    b.HasOne("DataEntity.Models.EfModels.PracticalExam", "PracticalExam")
                        .WithMany("PracticalEnrollmentExams")
                        .HasForeignKey("PracticalExamId")
                        .HasConstraintName("FK_PracticalEnrollmentExam_PracticalExam");

                    b.Navigation("EnrollTeacherCourse");

                    b.Navigation("PracticalExam");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalEnrollmentExamStudent", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollStudentCourse", "EnrollStudentCourse")
                        .WithMany("PracticalEnrollmentExamStudents")
                        .HasForeignKey("EnrollStudentCourseId")
                        .HasConstraintName("FK_PracticalEnrollmentExamStudent_EnrollStudentCourse");

                    b.HasOne("DataEntity.Models.EfModels.PracticalEnrollmentExam", "PracticalEnrollmentExam")
                        .WithMany("PracticalEnrollmentExamStudents")
                        .HasForeignKey("PracticalEnrollmentExamId")
                        .HasConstraintName("FK_PracticalEnrollmentExamStudent_PracticalEnrollmentExam");

                    b.Navigation("EnrollStudentCourse");

                    b.Navigation("PracticalEnrollmentExam");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalEnrollmentExamStudentSubject", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.PracticalEnrollmentExamStudent", "PracticalEnrollmentExamStudent")
                        .WithMany("PracticalEnrollmentExamStudentSubjects")
                        .HasForeignKey("PracticalEnrollmentExamStudentId")
                        .HasConstraintName("FK_PracticalEnrollmentExamStudentSubject_PracticalEnrollmentExamStudent");

                    b.HasOne("DataEntity.Models.EfModels.Subject", "Subject")
                        .WithMany("PracticalEnrollmentExamStudentSubjects")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_PracticalEnrollmentExamStudentSubject_Subject");

                    b.Navigation("PracticalEnrollmentExamStudent");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalEnrollmentExamStudentSubjectRating", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.PracticalEnrollmentExamStudentSubject", "PracticalEnrollmentExamStudentSubject")
                        .WithMany("PracticalEnrollmentExamStudentSubjectRatings")
                        .HasForeignKey("PracticalEnrollmentExamStudentSubjectId")
                        .HasConstraintName("FK_PracticalEnrollmentExamStudentSubjectRating_PracticalEnrollmentExamStudentSubject")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.PracticalQuestion", "PracticalQuestion")
                        .WithMany("PracticalEnrollmentExamStudentSubjectRatings")
                        .HasForeignKey("PracticalQuestionId")
                        .HasConstraintName("FK_PracticalEnrollmentExamStudentSubjectRating_PracticalQuestion")
                        .IsRequired();

                    b.Navigation("PracticalEnrollmentExamStudentSubject");

                    b.Navigation("PracticalQuestion");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalEnrollmentExamTrainer", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.PracticalEnrollmentExam", "PracticalEnrollmentExam")
                        .WithMany("PracticalEnrollmentExamTrainers")
                        .HasForeignKey("PracticalEnrollmentExamId")
                        .HasConstraintName("FK_PracticalEnrollmentExamTrainer_PracticalEnrollmentExam");

                    b.HasOne("DataEntity.Models.EfModels.Trainer", "Trainer")
                        .WithMany("PracticalEnrollmentExamTrainers")
                        .HasForeignKey("TrainerId")
                        .HasConstraintName("FK_PracticalEnrollmentExamTrainer_Trainer");

                    b.Navigation("PracticalEnrollmentExam");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalExamCourse", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Course", "Course")
                        .WithMany("PracticalExamCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_PracticalExamCourse_Course")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.PracticalExam", "PracticalExam")
                        .WithMany("PracticalExamCourses")
                        .HasForeignKey("PracticalExamId")
                        .HasConstraintName("FK_PracticalExamCourse_PracticalExam")
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("PracticalExam");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalExamCourseSubject", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.PracticalExamCourse", "PracticalExamCourse")
                        .WithMany("PracticalExamCourseSubjects")
                        .HasForeignKey("PracticalExamCourseId")
                        .HasConstraintName("FK_PracticalExamCourseSubject_PracticalExamCourse");

                    b.HasOne("DataEntity.Models.EfModels.Subject", "Subject")
                        .WithMany("PracticalExamCourseSubjects")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_PracticalExamCourseSubject_Subject");

                    b.Navigation("PracticalExamCourse");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalExamQuestion", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.PracticalExam", "PracticalExam")
                        .WithMany("PracticalExamQuestions")
                        .HasForeignKey("PracticalExamId")
                        .HasConstraintName("FK_PracticalExamQuestion_PracticalExam")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.PracticalQuestion", "PracticalQuestion")
                        .WithMany("PracticalExamQuestions")
                        .HasForeignKey("PracticalQuestionId")
                        .HasConstraintName("FK_PracticalExamQuestion_PracticalQuestion")
                        .IsRequired();

                    b.Navigation("PracticalExam");

                    b.Navigation("PracticalQuestion");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalExamTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.PracticalExam", "PracticalExam")
                        .WithMany("PracticalExamTranslations")
                        .HasForeignKey("PracticalExamId")
                        .HasConstraintName("FK_PracticalExamTranslation_PracticalExam")
                        .IsRequired();

                    b.Navigation("PracticalExam");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalQuestionTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.PracticalQuestion", "PracticalQuestion")
                        .WithMany("PracticalQuestionTranslations")
                        .HasForeignKey("PracticalQuestionId")
                        .HasConstraintName("FK_PracticalQuestionTranslation_PracticalQuestion")
                        .IsRequired();

                    b.Navigation("PracticalQuestion");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Question", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Trainer", "Teacher")
                        .WithMany("Questions")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_Question_Trainer");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.QuestionOption", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Question", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_QuestionOption_Question");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.QuestionOptionTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.QuestionOption", "Option")
                        .WithMany("QuestionOptionTranslations")
                        .HasForeignKey("OptionId")
                        .HasConstraintName("FK_QuestionOptionTranslation_QuestionOption");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.QuestionTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Question", "Question")
                        .WithMany("QuestionTranslations")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_QuestionTranslation_Question");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.RolePermission", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_RolePermissions_Permission")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.AspNetRole", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RolePermissions_RolePermissions")
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SectionOfCourse", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Course", "Course")
                        .WithMany("SectionOfCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_SectionOfCourse_Course")
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SectionOfCourseQuiz", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Lecture", "Lecture")
                        .WithMany("SectionOfCourseQuizzes")
                        .HasForeignKey("LectureId")
                        .HasConstraintName("FK_SectionOfCourseQuiz_Lecture");

                    b.HasOne("DataEntity.Models.EfModels.SectionOfCourse", "SectionOfCourse")
                        .WithMany("SectionOfCourseQuizzes")
                        .HasForeignKey("SectionOfCourseId")
                        .HasConstraintName("FK_SectionOfCourseQuiz_SectionOfCourse");

                    b.Navigation("Lecture");

                    b.Navigation("SectionOfCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SectionOfCourseTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.SectionOfCourse", "Section")
                        .WithMany("SectionOfCourseTranslations")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK_SectionOfCourseTranslation_SectionOfCourse")
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SemesterTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Semester", "Semester")
                        .WithMany("SemesterTranslations")
                        .HasForeignKey("SemesterId")
                        .HasConstraintName("FK_SemesterTranslation_Semester")
                        .IsRequired();

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SenangPay", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.AspNetUser", "ApplicationUser")
                        .WithMany("SenangPays")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollTeacherCourse")
                        .WithMany("SenangPays")
                        .HasForeignKey("EnrollTeacherCourseId")
                        .HasConstraintName("FK__SenangPay__Enrol__30E33A54");

                    b.HasOne("DataEntity.Models.EfModels.CmsProjectCost", "ProjectCost")
                        .WithMany("SenangPays")
                        .HasForeignKey("ProjectCostId")
                        .HasConstraintName("FK_SenangPay_CmsProjectCost");

                    b.HasOne("DataEntity.Models.EfModels.CmsProject", "Project")
                        .WithMany("SenangPays")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_SenangPay_CmsProject");

                    b.Navigation("ApplicationUser");

                    b.Navigation("EnrollTeacherCourse");

                    b.Navigation("Project");

                    b.Navigation("ProjectCost");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Student", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Contact", "Contact")
                        .WithMany("Students")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_Student_Contact")
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.StudentAttendance", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollTeacherCourse")
                        .WithMany("StudentAttendances")
                        .HasForeignKey("EnrollTeacherCourseId")
                        .HasConstraintName("FK_StudentAttendance_EnrollTeacherCourse");

                    b.HasOne("DataEntity.Models.EfModels.Student", "Student")
                        .WithMany("StudentAttendances")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentAttendance_Student");

                    b.Navigation("EnrollTeacherCourse");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.StudentBalanceHistory", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollStudentCourse", "EnrollStudentCourse")
                        .WithMany("StudentBalanceHistories")
                        .HasForeignKey("EnrollStudentCourseId")
                        .HasConstraintName("FK_StudentBalanceHistory_EnrollStudentCourse");

                    b.HasOne("DataEntity.Models.EfModels.Student", "Student")
                        .WithMany("StudentBalanceHistories")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentBalanceHistory_Student")
                        .IsRequired();

                    b.Navigation("EnrollStudentCourse");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.StudentExpulsionHistory", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollStudentCourse", "EnrollStudentCourse")
                        .WithMany("StudentExpulsionHistories")
                        .HasForeignKey("EnrollStudentCourseId")
                        .HasConstraintName("FK_StudentExpulsionHistory_EnrollStudentCourse");

                    b.HasOne("DataEntity.Models.EfModels.Student", "Student")
                        .WithMany("StudentExpulsionHistories")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentExpulsionHistory_Student");

                    b.Navigation("EnrollStudentCourse");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.StudentNote", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Student", "Student")
                        .WithMany("StudentNotes")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentNotes_Student")
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.StudentNotesTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.StudentNote", "StudentNote")
                        .WithMany("StudentNotesTranslations")
                        .HasForeignKey("StudentNoteId")
                        .HasConstraintName("FK_StudentNotesTranslation_StudentNotes")
                        .IsRequired();

                    b.Navigation("StudentNote");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.StudentSubscription", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollTeacherCourse")
                        .WithMany("StudentSubscriptions")
                        .HasForeignKey("EnrollTeacherCourseId")
                        .HasConstraintName("FK_StudentSubscription_EnrollTeacherCourse")
                        .IsRequired();

                    b.Navigation("EnrollTeacherCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.StudentTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Student", "Student")
                        .WithMany("StudentTranslations")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentTranslation_Student")
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SubCommunicationChannel", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.CommunicationChannel", "CommunicationChannel")
                        .WithMany("SubCommunicationChannels")
                        .HasForeignKey("CommunicationChannelId")
                        .HasConstraintName("FK_SubCommunicationChannel_CommunicationChannel")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.SubCommunicationChannel", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_SubCommunicationChannel_SubCommunicationChannel");

                    b.Navigation("CommunicationChannel");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SubCommunicationChannelTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.SubCommunicationChannel", "SubCommunicationChannel")
                        .WithMany("SubCommunicationChannelTranslations")
                        .HasForeignKey("SubCommunicationChannelId")
                        .HasConstraintName("FK_SubCommunicationChannelTranslation_SubCommunicationChannel")
                        .IsRequired();

                    b.Navigation("SubCommunicationChannel");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SubjectTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Subject", "Subject")
                        .WithMany("SubjectTranslations")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_SubjectTranslation_Subject")
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SystemFileTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.SystemFile", "SystemFile")
                        .WithMany("SystemFileTranslations")
                        .HasForeignKey("SystemFileId")
                        .HasConstraintName("FK_SystemFileTranslation_SystemFile")
                        .IsRequired();

                    b.Navigation("SystemFile");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SystemGroupTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.SystemGroup", "SystemGroup")
                        .WithMany("SystemGroupTranslations")
                        .HasForeignKey("SystemGroupId")
                        .HasConstraintName("FK_SystemGroupTranslation_SystemGroup")
                        .IsRequired();

                    b.Navigation("SystemGroup");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SystemGroupUser", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.SystemGroup", "SystemGroup")
                        .WithMany("SystemGroupUsers")
                        .HasForeignKey("SystemGroupId")
                        .HasConstraintName("FK_SystemGroupUsers_SystemGroup")
                        .IsRequired();

                    b.HasOne("DataEntity.Models.EfModels.UserProfile", "UserProfile")
                        .WithMany("SystemGroupUsers")
                        .HasForeignKey("UserProfileId")
                        .HasConstraintName("FK_SystemGroupUsers_UserProfile");

                    b.Navigation("SystemGroup");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SystemSetting", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Branch", "Branch")
                        .WithMany("SystemSettings")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_SystemSetting_Branch");

                    b.HasOne("DataEntity.Models.EfModels.SuperAdmin", "SuperAdmin")
                        .WithMany("SystemSettings")
                        .HasForeignKey("SuperAdminId")
                        .HasConstraintName("FK_SystemSetting_SuperAdmin");

                    b.Navigation("Branch");

                    b.Navigation("SuperAdmin");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SystemSettingTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.SystemSetting", "Setting")
                        .WithMany("SystemSettingTranslations")
                        .HasForeignKey("SettingId")
                        .HasConstraintName("FK_SystemSettingTranslation_SystemSetting")
                        .IsRequired();

                    b.Navigation("Setting");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.TeacherAttendance", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.EnrollTeacherCourse", "EnrollTeacherCourse")
                        .WithMany("TeacherAttendances")
                        .HasForeignKey("EnrollTeacherCourseId")
                        .HasConstraintName("FK_TeacherAttendances_EnrollTeacherCourse")
                        .IsRequired();

                    b.Navigation("EnrollTeacherCourse");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.TemplateHtml", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.DetailsLookup", "Type")
                        .WithMany("TemplateHtmls")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_TemplateHtml_DetailsLookup")
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Trainer", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Contact", "Contact")
                        .WithMany("Trainers")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_Trainer_Contact")
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.TrainerRateMeasureTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.TrainerRateMeasure", "TrainerRateMeasure")
                        .WithMany("TrainerRateMeasureTranslations")
                        .HasForeignKey("TrainerRateMeasureId")
                        .HasConstraintName("FK_TrainerRateMeasureTranslation_TrainerRateMeasure")
                        .IsRequired();

                    b.Navigation("TrainerRateMeasure");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.TrainerTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Trainer", "Trainer")
                        .WithMany("TrainerTranslations")
                        .HasForeignKey("TrainerId")
                        .HasConstraintName("FK_TrainerTranslation_Trainer")
                        .IsRequired();

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.UserProfile", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.Contact", "Contact")
                        .WithMany("UserProfiles")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_UserProfile_Contact");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.UserProfileTranslation", b =>
                {
                    b.HasOne("DataEntity.Models.EfModels.UserProfile", "UserProfile")
                        .WithMany("UserProfileTranslations")
                        .HasForeignKey("UserProfileId")
                        .HasConstraintName("FK_UserProfileTranslation_UserProfile")
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AboutDic", b =>
                {
                    b.Navigation("AboutDicTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AcademicSupervisionStandard", b =>
                {
                    b.Navigation("AcademicSupervisionRates");

                    b.Navigation("AcademicSupervisionStandardTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");

                    b.Navigation("AspNetUserRoles");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserRoles");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("SenangPays");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Assignment", b =>
                {
                    b.Navigation("AssignmentTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Branch", b =>
                {
                    b.Navigation("BranchTranslations");

                    b.Navigation("Contacts");

                    b.Navigation("Generalizations");

                    b.Navigation("Messages");

                    b.Navigation("SystemSettings");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Calendar", b =>
                {
                    b.Navigation("CalendarTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.City", b =>
                {
                    b.Navigation("CityTranslations");

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsCatery", b =>
                {
                    b.Navigation("CmsCateryTranslations");

                    b.Navigation("CmsPages");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsPage", b =>
                {
                    b.Navigation("CmsPageTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsProject", b =>
                {
                    b.Navigation("CmsProjectCosts");

                    b.Navigation("CmsProjectDonors");

                    b.Navigation("CmsProjectResources");

                    b.Navigation("CmsProjectTranslations");

                    b.Navigation("SenangPays");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsProjectCategory", b =>
                {
                    b.Navigation("CmsProjectCategoryTranslations");

                    b.Navigation("CmsProjects");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsProjectCost", b =>
                {
                    b.Navigation("CmsProjectCostTranslations");

                    b.Navigation("CmsProjectDonors");

                    b.Navigation("SenangPays");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsSlider", b =>
                {
                    b.Navigation("CmsSliderTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CmsWhatPeopleSay", b =>
                {
                    b.Navigation("CmsWhatPeopleSayTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CommunicationChannel", b =>
                {
                    b.Navigation("CommunicationChannelTranslations");

                    b.Navigation("SubCommunicationChannels");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Contact", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("CommunicationLogs");

                    b.Navigation("ContactTranslations");

                    b.Navigation("ContactTypes");

                    b.Navigation("Emails");

                    b.Navigation("Employees");

                    b.Navigation("EnrollCourseAllowUserRates");

                    b.Navigation("GeneralizationEmployees");

                    b.Navigation("InvoicesPays");

                    b.Navigation("Notifications");

                    b.Navigation("Students");

                    b.Navigation("Trainers");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Contacts");

                    b.Navigation("CountryTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Course", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("CertificateAdoptions");

                    b.Navigation("CourseCertifications");

                    b.Navigation("CourseMarks");

                    b.Navigation("CoursePrerequisiteCourses");

                    b.Navigation("CoursePrerequisitePrerequisiteCourses");

                    b.Navigation("CourseResources");

                    b.Navigation("CourseTranslations");

                    b.Navigation("EnrollTeacherCourses");

                    b.Navigation("ExamTemplates");

                    b.Navigation("PracticalExamCourses");

                    b.Navigation("SectionOfCourses");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CourseCategory", b =>
                {
                    b.Navigation("CourseCategoryTranslations");

                    b.Navigation("Courses");

                    b.Navigation("ExamTemplates");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CourseMark", b =>
                {
                    b.Navigation("CourseMarkTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CoursePackage", b =>
                {
                    b.Navigation("CoursePackagesRelations");

                    b.Navigation("CoursePakagesTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.CourseResource", b =>
                {
                    b.Navigation("CourseResourceTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Currency", b =>
                {
                    b.Navigation("CurrencyTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.DetailsLookup", b =>
                {
                    b.Navigation("DetailsLookupTranslations");

                    b.Navigation("TemplateHtmls");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Employee", b =>
                {
                    b.Navigation("EmployeeTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollAssignment", b =>
                {
                    b.Navigation("EnrollAssignmentTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseAssigment", b =>
                {
                    b.Navigation("EnrollCourseAssigmentQuestions");

                    b.Navigation("EnrollCourseAssigmentTranslations");

                    b.Navigation("EnrollStudentAssigments");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseAssigmentQuestion", b =>
                {
                    b.Navigation("EnrollCourseAssigmentQuestionOptions");

                    b.Navigation("EnrollCourseAssigmentQuestionTranslations");

                    b.Navigation("EnrollStudentAssigmentAnswers");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseAssigmentQuestionOption", b =>
                {
                    b.Navigation("EnrollCourseAssigmentQuestionOptionTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseExam", b =>
                {
                    b.Navigation("EnrollCourseExamQuestions");

                    b.Navigation("EnrollCourseExamTranslations");

                    b.Navigation("EnrollStudentExams");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseExamQuestion", b =>
                {
                    b.Navigation("EnrollStudentExamAnswers");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseQuiz", b =>
                {
                    b.Navigation("EnrollCourseQuizPointes");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollCourseResource", b =>
                {
                    b.Navigation("EnrollCourseResourceTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollLecture", b =>
                {
                    b.Navigation("EnrollCourseExams");

                    b.Navigation("EnrollCourseResources");

                    b.Navigation("EnrollLectureTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollSectionOfCourse", b =>
                {
                    b.Navigation("EnrollLectures");

                    b.Navigation("EnrollSectionOfCourseTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentAssigment", b =>
                {
                    b.Navigation("EnrollStudentAssigmentAnswers");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentAssigmentAnswer", b =>
                {
                    b.Navigation("EnrollStudentAssigmentAnswerOptions");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentCourse", b =>
                {
                    b.Navigation("CourseAttendances");

                    b.Navigation("EnrollCourseQuizPointes");

                    b.Navigation("EnrollStudentAlerts");

                    b.Navigation("EnrollStudentAssigments");

                    b.Navigation("EnrollStudentCourseAttachments");

                    b.Navigation("EnrollStudentExams");

                    b.Navigation("PracticalEnrollmentExamStudents");

                    b.Navigation("StudentBalanceHistories");

                    b.Navigation("StudentExpulsionHistories");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentExam", b =>
                {
                    b.Navigation("EnrollStudentExamAnswers");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollStudentExamAnswer", b =>
                {
                    b.Navigation("EnrollStudentExamAnswerOptions");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.EnrollTeacherCourse", b =>
                {
                    b.Navigation("AcademicSupervisionRates");

                    b.Navigation("CourseAttendances");

                    b.Navigation("CoursePackagesRelations");

                    b.Navigation("EnrollAssignments");

                    b.Navigation("EnrollCourseAllowUserRates");

                    b.Navigation("EnrollCourseAssigments");

                    b.Navigation("EnrollCourseExams");

                    b.Navigation("EnrollCourseQuizzes");

                    b.Navigation("EnrollCourseResources");

                    b.Navigation("EnrollCourseTimeCustomizations");

                    b.Navigation("EnrollCourseTimes");

                    b.Navigation("EnrollLectures");

                    b.Navigation("EnrollSectionOfCourses");

                    b.Navigation("EnrollStudentAlerts");

                    b.Navigation("EnrollStudentCourses");

                    b.Navigation("EnrollTeacherCourseTranlations");

                    b.Navigation("InvoicesPays");

                    b.Navigation("ManagementRates");

                    b.Navigation("MarkAdoptionForExams");

                    b.Navigation("MarkAdoptionForPracticalExams");

                    b.Navigation("PracticalEnrollmentExams");

                    b.Navigation("SenangPays");

                    b.Navigation("StudentAttendances");

                    b.Navigation("StudentSubscriptions");

                    b.Navigation("TeacherAttendances");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ExamQuestion", b =>
                {
                    b.Navigation("EnrollCourseExamQuestions");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ExamTemplate", b =>
                {
                    b.Navigation("EnrollCourseExams");

                    b.Navigation("ExamQuestions");

                    b.Navigation("ExamTemplateTranslations");

                    b.Navigation("MarkAdoptionForExams");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Generalization", b =>
                {
                    b.Navigation("GeneralizationEmployees");

                    b.Navigation("GeneralizationTranslations");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Lecture", b =>
                {
                    b.Navigation("CourseResources");

                    b.Navigation("EnrollCourseQuizzes");

                    b.Navigation("LectureTranslations");

                    b.Navigation("SectionOfCourseQuizzes");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ManagementRate", b =>
                {
                    b.Navigation("ManagementRateLines");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.ManagementStandard", b =>
                {
                    b.Navigation("ManagementRateLines");

                    b.Navigation("ManagementStandardTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.MasterLookup", b =>
                {
                    b.Navigation("DetailsLookups");

                    b.Navigation("MasterLookupTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Module", b =>
                {
                    b.Navigation("ModuleTranslations");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Permission", b =>
                {
                    b.Navigation("PermissionTranslations");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalEnrollmentExam", b =>
                {
                    b.Navigation("PracticalEnrollmentExamStudents");

                    b.Navigation("PracticalEnrollmentExamTrainers");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalEnrollmentExamStudent", b =>
                {
                    b.Navigation("PracticalEnrollmentExamStudentSubjects");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalEnrollmentExamStudentSubject", b =>
                {
                    b.Navigation("PracticalEnrollmentExamStudentSubjectRatings");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalExam", b =>
                {
                    b.Navigation("MarkAdoptionForPracticalExams");

                    b.Navigation("PracticalEnrollmentExams");

                    b.Navigation("PracticalExamCourses");

                    b.Navigation("PracticalExamQuestions");

                    b.Navigation("PracticalExamTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalExamCourse", b =>
                {
                    b.Navigation("PracticalExamCourseSubjects");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.PracticalQuestion", b =>
                {
                    b.Navigation("PracticalEnrollmentExamStudentSubjectRatings");

                    b.Navigation("PracticalExamQuestions");

                    b.Navigation("PracticalQuestionTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Question", b =>
                {
                    b.Navigation("ExamQuestions");

                    b.Navigation("QuestionOptions");

                    b.Navigation("QuestionTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.QuestionOption", b =>
                {
                    b.Navigation("EnrollStudentExamAnswerOptions");

                    b.Navigation("QuestionOptionTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SectionOfCourse", b =>
                {
                    b.Navigation("Lectures");

                    b.Navigation("SectionOfCourseQuizzes");

                    b.Navigation("SectionOfCourseTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Semester", b =>
                {
                    b.Navigation("CertificateAdoptions");

                    b.Navigation("EnrollTeacherCourses");

                    b.Navigation("SemesterTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Student", b =>
                {
                    b.Navigation("EnrollStudentCourses");

                    b.Navigation("StudentAttendances");

                    b.Navigation("StudentBalanceHistories");

                    b.Navigation("StudentExpulsionHistories");

                    b.Navigation("StudentNotes");

                    b.Navigation("StudentTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.StudentNote", b =>
                {
                    b.Navigation("StudentNotesTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SubCommunicationChannel", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("SubCommunicationChannelTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Subject", b =>
                {
                    b.Navigation("PracticalEnrollmentExamStudentSubjects");

                    b.Navigation("PracticalExamCourseSubjects");

                    b.Navigation("SubjectTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SuperAdmin", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("SystemSettings");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SystemFile", b =>
                {
                    b.Navigation("ItemFiles");

                    b.Navigation("SystemFileTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SystemGroup", b =>
                {
                    b.Navigation("SystemGroupTranslations");

                    b.Navigation("SystemGroupUsers");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.SystemSetting", b =>
                {
                    b.Navigation("SystemSettingTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.TemplateHtml", b =>
                {
                    b.Navigation("CourseCertifications");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.Trainer", b =>
                {
                    b.Navigation("EnrollTeacherCourses");

                    b.Navigation("PracticalEnrollmentExamTrainers");

                    b.Navigation("Questions");

                    b.Navigation("TrainerTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.TrainerRateMeasure", b =>
                {
                    b.Navigation("TrainerRateMeasureTranslations");
                });

            modelBuilder.Entity("DataEntity.Models.EfModels.UserProfile", b =>
                {
                    b.Navigation("SystemGroupUsers");

                    b.Navigation("UserProfileTranslations");
                });
#pragma warning restore 612, 618
        }
    }
}
